[{"path":"/articles/cql2-example.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"rstac CQL2 examples","text":"CQL2 OGC standard enables complex filter expressions OAFeat3 STAC web services. CQL2 standard states expressions can represented JSON TEXT formats. implementation intends convert native R expressions CQL2 valid expressions without needing cumbersome nested lists dictionaries. Also, can make CQL2 filter requisition JSON TEXT formats filter representation.","code":""},{"path":"/articles/cql2-example.html","id":"translating-r-expressions-to-cql2-syntax","dir":"Articles","previous_headings":"","what":"Translating R expressions to CQL2 syntax","title":"rstac CQL2 examples","text":"explain difference TEXT JSON CQL2 representation, let’s start simple example. following code, valid CQL2 expression (TEXT format) refers two properties, vehicle_height bridge_clearance. filter expression can passed HTTP GET verb implemented service retrieve features satisfy condition. expression can represented JSON format, suitable HTTP POST requests: Note properties vehicle_height bridge_clearance represented format. elements object containing property member. Also, go arguments operators (case,> - operators). R language, JSON represented nested lists, somewhat cumbersome write. produce valid CQL2 filter expressions, use R abstract syntax tree (AST) R expressions can converted TEXT JSON formats. Let us see previous example written R CQL2: cases, CQL2 object representation built expression using AST R expression evaluation. , object converted TEXT JSON format. CQL2 filters TEXT format sometimes represented way R expression. However, sometimes case, can see examples provided .","code":"vehicle_height > (bridge_clearance - 1)) {   \"op\": \">\",   \"args\": [     {\"property\":\"vehicle_height\"},     {       \"op\": \"-\",       \"args\": [         {\"property\":\"bridge_clearance\"},         1       ]     }   ] } library(rstac) cql2_text(vehicle_height > (bridge_clearance - 1)) # TEXT format ## vehicle_height > bridge_clearance - 1 cql2_json(vehicle_height > (bridge_clearance - 1)) # JSON format ## {\"op\":\">\",\"args\":[{\"property\":\"vehicle_height\"},{\"op\":\"-\",\"args\":[{\"property\":\"bridge_clearance\"},1]}]}"},{"path":"/articles/cql2-example.html","id":"data-types-and-literal-values","dir":"Articles","previous_headings":"Translating R expressions to CQL2 syntax","what":"Data types and literal values","title":"rstac CQL2 examples","text":"literal value part CQL2 filter expression used specified expression. scalar data types : character string, number, boolean, timestamp, date. character string number boolean timestamp date","code":"cql2_text(\"Via dell'Avvento\") ## 'Via dell''Avvento' cql2_json(\"Via dell'Avvento\") ## \"Via dell'Avvento\" cql2_text(3.1415) ## 3.1415 cql2_json(-100) ## -100 cql2_text(TRUE) ## true cql2_json(FALSE) ## false cql2_text(timestamp(\"1969-07-20T20:17:40Z\")) ## TIMESTAMP('1969-07-20T20:17:40Z') cql2_json(timestamp(\"1969-07-20T20:17:40Z\")) ## {\"timestamp\":\"1969-07-20T20:17:40Z\"} cql2_text(date(\"1969-07-20\")) ## DATE('1969-07-20') cql2_json(date(\"1969-07-20\")) ## {\"date\":\"1969-07-20\"}"},{"path":"/articles/cql2-example.html","id":"property-references","dir":"Articles","previous_headings":"Translating R expressions to CQL2 syntax","what":"Property references","title":"rstac CQL2 examples","text":"property item can evaluated CQL2 filter expression name.","code":"cql2_text(windSpeed > 1) ## windSpeed > 1 cql2_json(windSpeed > 1) ## {\"op\":\">\",\"args\":[{\"property\":\"windSpeed\"},1]}"},{"path":"/articles/cql2-example.html","id":"standard-comparison-predicates","dir":"Articles","previous_headings":"Translating R expressions to CQL2 syntax","what":"Standard comparison predicates","title":"rstac CQL2 examples","text":"comparison predicate evaluates two scalar expressions satisfy specified comparison operator. standard comparison operators : =, !=, <, >, <=, >=, NULL. NULL operator","code":"cql2_text(city == \"Crato\") ## city = 'Crato' cql2_json(city == \"Jacareí\") ## {\"op\":\"=\",\"args\":[{\"property\":\"city\"},\"Jacareí\"]} cql2_text(avg(windSpeed) < 4) ## avg(windSpeed) < 4 cql2_json(avg(windSpeed) < 4) ## {\"op\":\"<\",\"args\":[{\"function\":{\"name\":\"avg\",\"args\":[{\"property\":\"windSpeed\"}]}},4]} cql2_text(balance - 150.0 > 0) ## balance - 150 > 0 cql2_json(balance - 150.0 > 0) ## {\"op\":\">\",\"args\":[{\"op\":\"-\",\"args\":[{\"property\":\"balance\"},150]},0]} cql2_text(updated >= date('1970-01-01')) ## updated >= DATE('1970-01-01') cql2_json(updated >= date('1970-01-01')) ## {\"op\":\">=\",\"args\":[{\"property\":\"updated\"},{\"date\":\"1970-01-01\"}]} cql2_text(!is_null(geometry)) ## geometry IS NOT NULL cql2_json(!is_null(geometry)) ## {\"op\":\"not\",\"args\":[{\"op\":\"isNull\",\"args\":[{\"property\":\"geometry\"}]}]}"},{"path":"/articles/cql2-example.html","id":"advanced-comparison-operators","dir":"Articles","previous_headings":"Translating R expressions to CQL2 syntax","what":"Advanced comparison operators","title":"rstac CQL2 examples","text":"comparison predicate evaluates two scalar expressions satisfy specified comparison operator. Advanced comparison operators : LIKE, , . LIKE operator operator operator","code":"cql2_text(name %like% \"Smith%\") ## name LIKE 'Smith%' cql2_json(name %like% \"Smith%\") ## {\"op\":\"like\",\"args\":[{\"property\":\"name\"},\"Smith%\"]} cql2_text(between(depth, 100.0, 150.0)) ## depth BETWEEN 100 AND 150 cql2_json(between(depth, 100.0, 150.0)) ## {\"op\":\"between\",\"args\":[{\"property\":\"depth\"},100,150]} cql2_text(cityName %in% list('Toronto', 'Frankfurt', 'Tokyo', 'New York')) ## cityName IN ('Toronto','Frankfurt','Tokyo','New York') cql2_json(cityName %in% list('Toronto', 'Frankfurt', 'Tokyo', 'New York')) ## {\"op\":\"in\",\"args\":[{\"property\":\"cityName\"},[\"Toronto\",\"Frankfurt\",\"Tokyo\",\"New York\"]]} cql2_text(!category %in% list(1, 2, 3, 4)) ## category NOT IN (1,2,3,4) cql2_json(!category %in% list(1, 2, 3, 4)) ## {\"op\":\"not\",\"args\":[{\"op\":\"in\",\"args\":[{\"property\":\"category\"},[1,2,3,4]]}]}"},{"path":"/articles/cql2-example.html","id":"spatial-operators","dir":"Articles","previous_headings":"Translating R expressions to CQL2 syntax","what":"Spatial operators","title":"rstac CQL2 examples","text":"spatial predicate evaluates two spatial expressions satisfy specified spatial operator. supported spatial operators : S_INTERSECTS, S_EQUALS, S_DISJOINT, S_TOUCHES, S_WITHIN, S_OVERLAPS, S_CROSSES, S_CONTAINS. Note: provide escape evaluate user variables using {{ !!. symbols largely used R Data Science community.","code":"poly <- list(type = \"Polygon\",              coordinates = list(matrix(c(0,0,0,0,1,1), ncol = 2))) cql2_text(s_intersects(geometry, {{poly}})) ## S_INTERSECTS(geometry,POLYGON((0 0,0 1,0 1))) cql2_json(s_intersects(geometry, {{poly}})) ## {\"op\":\"s_intersects\",\"args\":[{\"property\":\"geometry\"},{\"type\":\"Polygon\",\"coordinates\":[[[0,0],[0,1],[0,1]]]}]}"},{"path":"/articles/cql2-example.html","id":"temporal-operators","dir":"Articles","previous_headings":"Translating R expressions to CQL2 syntax","what":"Temporal operators","title":"rstac CQL2 examples","text":"temporal predicate evaluates two temporal expressions satisfy specified temporal operator. supported temporal operators : T_AFTER, T_BEFORE, T_CONTAINS, T_DISJOINT, T_DURING, T_EQUALS, T_FINISHEDBY, T_FINISHES, T_INTERSECTS, T_MEETS, T_METBY, T_OVERLAPPEDBY, T_OVERLAPS, T_STARTEDBY, T_STARTS.","code":"cql2_text(t_intersects(event_date, interval(\"1969-07-16T05:32:00Z\", \"1969-07-24T16:50:35Z\"))) ## T_INTERSECTS(event_date,INTERVAL('1969-07-16T05:32:00Z','1969-07-24T16:50:35Z')) cql2_json(t_intersects(event_date, interval(\"1969-07-16T05:32:00Z\", \"1969-07-24T16:50:35Z\"))) ## {\"op\":\"t_intersects\",\"args\":[{\"property\":\"event_date\"},{\"interval\":[\"1969-07-16T05:32:00Z\",\"1969-07-24T16:50:35Z\"]}]}"},{"path":"/articles/cql2-example.html","id":"support-for-functions-in-cql2","dir":"Articles","previous_headings":"Translating R expressions to CQL2 syntax","what":"Support for functions in CQL2","title":"rstac CQL2 examples","text":"Functions allow implementations extend language. Example function returns geometry value.","code":"cql2_text(s_within(road, Buffer(geometry, 10, \"m\"))) ## S_WITHIN(road,Buffer(geometry,10,'m')) cql2_json(s_within(road, Buffer(geometry, 10, \"m\"))) ## {\"op\":\"s_within\",\"args\":[{\"property\":\"road\"},{\"function\":{\"name\":\"Buffer\",\"args\":[{\"property\":\"geometry\"},10,\"m\"]}}]}"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Brazil Data Cube Team. Maintainer, author. National Institute Space Research (INPE). Copyright holder.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"R. Simoes, F. C. de Souza, M. Zaglia, G. R. de Queiroz, R. D. C. dos Santos K. R. Ferreira, \"Rstac: R Package Access Spatiotemporal Asset Catalog Satellite Imagery,\" 2021 IEEE International Geoscience Remote Sensing Symposium IGARSS, 2021, pp. 7674-7677, doi: 10.1109/IGARSS47720.2021.9553518.","code":"@InProceedings{,   title = {Rstac: An R Package to Access Spatiotemporal Asset Catalog Satellite Imagery},   author = {Rolf Simoes and Felipe Souza and Matheus Zaglia and Gilberto Ribeiro Queiroz and Rafael Santos and Karine Ferreira},   booktitle = {2021 IEEE International Geoscience and Remote Sensing Symposium IGARSS},   year = {2021},   pages = {7674-7677},   doi = {10.1109/IGARSS47720.2021.9553518}, }"},{"path":"/index.html","id":"rstac-","dir":"","previous_headings":"","what":"Client Library for SpatioTemporal Asset Catalog","title":"Client Library for SpatioTemporal Asset Catalog","text":"R Client Library SpatioTemporal Asset Catalog (rstac) STAC specification files web services used describe geospatial information assets. specification can consulted https://stacspec.org/. R client library STAC (rstac) designed fully support STAC API v1.0.0. also supports earlier versions (>= v0.8.0).","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Client Library for SpatioTemporal Asset Catalog","text":"","code":"# install via CRAN  install.packages(\"rstac\")"},{"path":"/index.html","id":"development-version","dir":"","previous_headings":"Installation","what":"Development version","title":"Client Library for SpatioTemporal Asset Catalog","text":"install development version rstac, run following commands Importing rstac package:","code":"# load necessary libraries library(devtools) install_github(\"brazil-data-cube/rstac\") library(rstac)"},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Client Library for SpatioTemporal Asset Catalog","text":"rstac implements following STAC endpoints: functions can used retrieve information STAC API service. code creates stac object list available collections STAC API Brazil Data Cube project Brazilian National Space Research Institute INPE. variable s_obj stores information connect Brazil Data Cube STAC web service. get_request method makes HTTP GET connection retrieves STAC Catalog document server. links entry available collection can accessed via STAC API. code , get STAC items CB4_64_16D_STK-1 collection intersects bounding box passed bbox parameter. , call stac_search function implements STAC /search endpoint. returned document STAC Item Collection (geojson containing feature collection). rstac uses httr package manage HTTP requests, allowing use tokens authorization protocols OAuth 1.0 2.0 well configuration options. code , present example pass parameter token HTTP request. addition functions mentioned , rstac package provides extra functions handling items bulk download assets.","code":"s_obj <- stac(\"https://brazildatacube.dpi.inpe.br/stac/\")  get_request(s_obj) #> ###STACCatalog #> - id: bdc #> - description: Brazil Data Cube Catalog #> - field(s): description, id, stac_version, links it_obj <- s_obj |>   stac_search(collections = \"CB4_64_16D_STK-1\",               bbox = c(-47.02148, -17.35063, -42.53906, -12.98314),               limit = 100) |>    get_request()  it_obj #> ###STACItemCollection #> - matched feature(s): 306 #> - features (100 item(s) / 206 not fetched): #>   - CB4_64_16D_STK_v001_022024_2022-08-13_2022-08-28 #>   - CB4_64_16D_STK_v001_022025_2022-08-13_2022-08-28 #>   - CB4_64_16D_STK_v001_022024_2022-07-28_2022-08-12 #>   - CB4_64_16D_STK_v001_022025_2022-07-28_2022-08-12 #>   - CB4_64_16D_STK_v001_022024_2022-07-12_2022-07-27 #>   - CB4_64_16D_STK_v001_022025_2022-07-12_2022-07-27 #>   - CB4_64_16D_STK_v001_022024_2022-06-26_2022-07-11 #>   - CB4_64_16D_STK_v001_022025_2022-06-26_2022-07-11 #>   - CB4_64_16D_STK_v001_022024_2022-06-10_2022-06-25 #>   - CB4_64_16D_STK_v001_022025_2022-06-10_2022-06-25 #>   - ... with 90 more feature(s). #> - assets:  #> EVI, NDVI, CMASK, BAND13, BAND14, BAND15, BAND16, CLEAROB, TOTALOB, thumbnail, PROVENANCE #> - other field(s): type, links, context, features it_obj <- s_obj |>   stac_search(collections = \"CB4_64_16D_STK-1\",               bbox = c(-47.02148, -17.35063, -42.53906, -12.98314)) |>   get_request(add_headers(\"x-api-key\" = \"MY-TOKEN\"))"},{"path":"/index.html","id":"items-functions","dir":"","previous_headings":"Usage","what":"Items functions","title":"Client Library for SpatioTemporal Asset Catalog","text":"rstac provides functions facilitates interaction STAC data. example , get many items matched search criteria: However, count many items it_obj variable, get 10, meaning items fetched STAC service:","code":"# it_obj variable from the last code example it_obj |>    items_matched() #> [1] 306 it_obj |>    items_length() #> [1] 100 # fetch all items from server  # (but don't stored them back in it_obj) it_obj <- it_obj |>    items_fetch(progress = FALSE)   it_obj |>   items_length() #> [1] 306"},{"path":"/index.html","id":"download-assets","dir":"","previous_headings":"Usage","what":"Download assets","title":"Client Library for SpatioTemporal Asset Catalog","text":"’ve got previous example metadata STAC Items, including links geospatial data called assets. download assets STAC Item Collection can use assets_download() function, returns update STAC Item Collection referring downloaded assets. code downloads thumbnail assets (.png files) 10 items stored it_obj variable.","code":"download_items <- it_obj |>   assets_download(assets_name = \"thumbnail\", items_max = 10)"},{"path":"/index.html","id":"cql2-query-filter","dir":"","previous_headings":"Usage","what":"CQL2 query filter","title":"Client Library for SpatioTemporal Asset Catalog","text":"rstac also supports advanced query filter using common query language (CQL2). Users can write complex filter expressions using R code easy natural way. complete","code":"s_obj <- stac(\"https://planetarycomputer.microsoft.com/api/stac/v1\")  it_obj <- s_obj |>    ext_filter(     collection == \"sentinel-2-l2a\" && `s2:vegetation_percentage` >= 50 &&       `eo:cloud_cover` <= 10 && `s2:mgrs_tile` == \"20LKP\" &&        anyinteracts(datetime, interval(\"2020-06-01\", \"2020-09-30\"))   ) |>   post_request()"},{"path":"/index.html","id":"getting-help","dir":"","previous_headings":"","what":"Getting help","title":"Client Library for SpatioTemporal Asset Catalog","text":"can get full explanation STAC (v1.0.0) endpoint STAC API spec. detailed documentation examples use endpoint functions available rstac package can obtained typing ?rstac R console.","code":""},{"path":"/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Client Library for SpatioTemporal Asset Catalog","text":"cite rstac publications use: R. Simoes, F. C. de Souza, M. Zaglia, G. R. de Queiroz, R. D. C. dos Santos K. R. Ferreira, “Rstac: R Package Access Spatiotemporal Asset Catalog Satellite Imagery,” 2021 IEEE International Geoscience Remote Sensing Symposium IGARSS, 2021, pp. 7674-7677, doi: 10.1109/IGARSS47720.2021.9553518.","code":""},{"path":"/index.html","id":"acknowledgements-for-financial-support","dir":"","previous_headings":"","what":"Acknowledgements for financial support","title":"Client Library for SpatioTemporal Asset Catalog","text":"acknowledge thank project funders provided financial material support: Amazon Fund, established Brazilian government financial contribution Norway, project contract Brazilian Development Bank (BNDES) Foundation Science, Technology Space Applications (FUNCATE), establishment Brazil Data Cube, process 17.2.0536.1. Radiant Earth Foundation STAC Project Steering Committee advance STAC ecosystem programme.","code":""},{"path":"/index.html","id":"how-to-contribute","dir":"","previous_headings":"","what":"How to contribute?","title":"Client Library for SpatioTemporal Asset Catalog","text":"rstac package implemented based extensible architecture, feel free contribute implementing new STAC API extensions/fragments based STAC API specifications. Make project fork. Create file inside R/ directory called ext_{extension_name}.R. code, need specify subclass name (e.g.ext_subclass) extension RSTACQuery function constructor, implement S3 generics methods: get_endpoint, before_request, after_response. Using S3 generics methods can define parameters must submitted HTTP request types returned documents responses. See implemented ext_query API extension example. Make Pull Request branch dev.","code":""},{"path":"/reference/assets_download.html","id":null,"dir":"Reference","previous_headings":"","what":"Downloads assets via STAC API — assets_download","title":"Downloads assets via STAC API — assets_download","text":"assets_download function downloads assets provided STAC API.","code":""},{"path":"/reference/assets_download.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Downloads assets via STAC API — assets_download","text":"","code":"assets_download(   items,   asset_names = NULL,   output_dir = getwd(),   overwrite = FALSE,   items_max = Inf,   progress = TRUE,   download_fn = NULL,   ...,   fn = deprecated() )  # S3 method for STACItemCollection assets_download(   items,   asset_names = NULL,   output_dir = \".\",   overwrite = FALSE,   items_max = Inf,   progress = TRUE,   download_fn = NULL,   ...,   fn = deprecated() )  # S3 method for STACItem assets_download(   items,   asset_names = NULL,   output_dir = \".\",   overwrite = FALSE,   items_max = Inf,   progress = TRUE,   download_fn = NULL,   ...,   fn = deprecated() )"},{"path":"/reference/assets_download.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Downloads assets via STAC API — assets_download","text":"items STACItem STACItemCollection object representing result /stac/search, /collections/{collectionId}/items /collections/{collectionId}/items/{itemId} endpoints. asset_names character assets names filtered. output_dir character directory assets saved. Default working directory (getwd()) overwrite logical TRUE replaced existing file, FALSE warning message shown. items_max numeric corresponding many items downloaded. progress logical indicating progress bar must shown . Defaults TRUE. download_fn function handle list assets item. Using function can change hrefs asset, well use another request verb, POST. ... config parameters passed GET, add_headers set_cookies. fn use download_fn parameter instead.","code":""},{"path":"/reference/assets_download.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Downloads assets via STAC API — assets_download","text":"STACItemCollection STACItem object, link item pointing directory assets saved.","code":""},{"path":[]},{"path":"/reference/assets_download.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Downloads assets via STAC API — assets_download","text":"","code":"if (FALSE) {  stac(\"https://brazildatacube.dpi.inpe.br/stac/\") %>%    stac_search(collections = \"CB4_64_16D_STK-1\",                datetime = \"2019-06-01/2019-08-01\") %>%    stac_search() %>%    get_request() %>%    assets_download(asset_names = \"thumbnail\", output_dir = tempdir()) }"},{"path":[]},{"path":"/reference/assets_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assets filter — assets_filter","text":"","code":"assets_filter(items, ..., filter_fn = NULL)  # S3 method for STACItemCollection assets_filter(items, ..., filter_fn = NULL)  # S3 method for STACItem assets_filter(items, ..., filter_fn = NULL)"},{"path":"/reference/assets_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assets filter — assets_filter","text":"items STACItemCollection object representing result /stac/search, /collections/{collectionId}/items. ... additional arguments. See details. filter_fn function used filter attributes listed properties.","code":""},{"path":"/reference/assets_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assets filter — assets_filter","text":"list attributes date, bands paths.","code":""},{"path":"/reference/assets_function.html","id":null,"dir":"Reference","previous_headings":"","what":"Assets functions — assets_function","title":"Assets functions — assets_function","text":"function returns date, band URL fields assets STACItemCollection object. URL can add GDAL library drivers following schemes: HTTP/HTTPS files, S3 (AWS S3) GS (Google Cloud Storage).","code":""},{"path":"/reference/assets_function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assets functions — assets_function","text":"","code":"assets_url(items, append_gdalvsi = TRUE)  # S3 method for STACItemCollection assets_url(items, append_gdalvsi = TRUE)  # S3 method for STACItem assets_url(items, append_gdalvsi = TRUE)  assets_select(items, asset_names = NULL, filter_fn = NULL)  # S3 method for STACItemCollection assets_select(items, asset_names = NULL, filter_fn = NULL)  # S3 method for STACItem assets_select(items, asset_names = NULL, filter_fn = NULL)"},{"path":"/reference/assets_function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assets functions — assets_function","text":"items STACItemCollection object representing result /stac/search, /collections/{collectionId}/items. append_gdalvsi logical  true, gdal drivers included URL asset. following schemes supported: HTTP/HTTPS files, S3 (AWS S3) GS (Google Cloud Storage). asset_names character assets names filtered. NULL (default) assets returned.. filter_fn function used filter attributes listed properties.","code":""},{"path":"/reference/assets_function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assets functions — assets_function","text":"list attributes date, bands paths.","code":""},{"path":"/reference/assets_function.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assets functions — assets_function","text":"","code":"if (FALSE) {  # STACItemCollection object  stac_item <- stac(\"https://brazildatacube.dpi.inpe.br/stac/\") %>%   stac_search(collections = \"CB4_64_16D_STK-1\", limit = 100,          datetime = \"2017-08-01/2018-03-01\",          bbox = c(-48.206,-14.195,-45.067,-12.272)) %>%   get_request() %>% items_fetch(progress = FALSE)   stac_item %>% assets_url() }"},{"path":"/reference/collections.html","id":null,"dir":"Reference","previous_headings":"","what":"Endpoint functions — collections","title":"Endpoint functions — collections","text":"collections function implements WFS3 /collections /collections/{collectionId} endpoints. endpoint retrieves specific STAC objects: /collections: Returns list STAC Collection published STAC service /collections/{collectionId}: Returns single STAC Collection object","code":""},{"path":"/reference/collections.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Endpoint functions — collections","text":"","code":"collections(q, collection_id = NULL)"},{"path":"/reference/collections.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Endpoint functions — collections","text":"q RSTACQuery object expressing STAC query criteria. collection_id character collection id retrieved.","code":""},{"path":"/reference/collections.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Endpoint functions — collections","text":"RSTACQuery object subclass collections /collections/ endpoint, collection_id subclass /collections/{collection_id} endpoint, containing search field parameters provided STAC API web service.","code":""},{"path":[]},{"path":"/reference/collections.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Endpoint functions — collections","text":"","code":"if (FALSE) {  stac(\"https://brazildatacube.dpi.inpe.br/stac/\") %>%    collections() %>%    get_request()   stac(\"https://brazildatacube.dpi.inpe.br/stac/\") %>%    collections(collection_id = \"CB4_64_16D_STK-1\") %>%    get_request() }"},{"path":"/reference/conformance.html","id":null,"dir":"Reference","previous_headings":"","what":"Conformance endpoint — conformance","title":"Conformance endpoint — conformance","text":"conformance endpoint provides capabilities service. endpoint accessible provider's catalog (/conformance).","code":""},{"path":"/reference/conformance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conformance endpoint — conformance","text":"","code":"conformance(q)"},{"path":"/reference/conformance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conformance endpoint — conformance","text":"q RSTACQuery object expressing STAC query criteria.","code":""},{"path":"/reference/conformance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conformance endpoint — conformance","text":"RSTACQuery object subclass conformance /conformance endpoint.","code":""},{"path":[]},{"path":"/reference/conformance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conformance endpoint — conformance","text":"","code":"if (FALSE) { stac(\"https://planetarycomputer.microsoft.com/api/stac/v1\") %>%   conformance() %>% get_request() }"},{"path":"/reference/cql2_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert R expressions to CQL2 — cql2_functions","title":"Convert R expressions to CQL2 — cql2_functions","text":"functions convert R expressions CQL2 standard (TEXT JSON).","code":""},{"path":"/reference/cql2_functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert R expressions to CQL2 — cql2_functions","text":"","code":"cql2_json(expr)  cql2_text(expr)"},{"path":"/reference/cql2_functions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert R expressions to CQL2 — cql2_functions","text":"expr R expression represented CQL2","code":""},{"path":"/reference/doc_query.html","id":null,"dir":"Reference","previous_headings":"","what":"Document utils functions — doc_query","title":"Document utils functions — doc_query","text":"Document utils functions","code":""},{"path":"/reference/doc_query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Document utils functions — doc_query","text":"","code":"doc_query(d)"},{"path":"/reference/doc_query.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Document utils functions — doc_query","text":"d RSTACDocument object","code":""},{"path":"/reference/doc_query.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Document utils functions — doc_query","text":"RSTACQuery object predecessor subclass fields used request.","code":""},{"path":"/reference/ext_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter extension — ext_filter","title":"Filter extension — ext_filter","text":"ext_filter() implements Common Query Language (CQL2) filter extension rstac. extension expands filter capabilities providing query language construct complex expressions. CQL2 OGC standard defines filters can constructed. supports predicates standard data types like strings, numbers, boolean well spatial geometries (point, lines, polygons) temporal data (instants intervals). rstac translates R expressions CQL2 allowing users express filter criteria using R language. details create CQL2 expressions rstac, see details section.","code":""},{"path":"/reference/ext_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter extension — ext_filter","text":"","code":"ext_filter(q, expr, lang = NULL, crs = NULL)"},{"path":"/reference/ext_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter extension — ext_filter","text":"q RSTACQuery object expressing STAC query criteria. expr valid R expression translated CQL2 (see details). lang character value indicating CQL2 representation used. can either \"cql2-text\" (plain text) \"cql2-json\" (JSON format). NULL (default), \"cql2-text\" used HTTP GET requests \"cql2-json\" POST requests. crs optional character value informing coordinate reference system used geometry objects. NULL (default) STAC services assume \"WGS 84\".","code":""},{"path":"/reference/ext_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter extension — ext_filter","text":"RSTACQuery object  subclass ext_filter containing request parameters passed get_request() post_request() function.","code":""},{"path":"/reference/ext_filter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter extension — ext_filter","text":"allow users express filter criteria R language, rstac takes advantage abstract syntax tree (AST) translate R expressions CQL2 expressions. following topics describes correspondences rstac expressions CQL2 operators.","code":""},{"path":"/reference/ext_filter.html","id":"standard-comparison-operators","dir":"Reference","previous_headings":"","what":"Standard comparison operators","title":"Filter extension — ext_filter","text":"==, >=, <=, >, <, != operators correspond =, >=, <=, >, <, <> CQL2, respectively. function is_null() !is_null() corresponds NULL NULL CQL2 operators, respectively.","code":""},{"path":"/reference/ext_filter.html","id":"advanced-comparison-operators","dir":"Reference","previous_headings":"","what":"Advanced comparison operators","title":"Filter extension — ext_filter","text":"%like% b corresponds CQL2 LIKE b, b strings values. (, b, c) corresponds CQL2 b c, b c integer values. %% b corresponds CQL2 (b), b list values type .","code":""},{"path":"/reference/ext_filter.html","id":"spatial-operators","dir":"Reference","previous_headings":"","what":"Spatial operators","title":"Filter extension — ext_filter","text":"functions s_intersects(, b), s_touches(, b), s_within(, b), s_overlaps(, b), s_crosses(, b), s_contains(, b) corresponds CQL2 S_INTERSECTS(, b), S_TOUCHES(, b), S_WITHIN(, b), S_OVERLAPS(, b), S_CROSSES(, b), S_CONTAINS(, b) operators, respectively. , b geometry objects. rstac accepts sf, sfc, sfg, geojson objects.","code":""},{"path":"/reference/ext_filter.html","id":"temporal-operators","dir":"Reference","previous_headings":"","what":"Temporal operators","title":"Filter extension — ext_filter","text":"functions date(), timestamp(), interval(, b) corresponds CQL2 DATE(), TIMESTAMP(), INTERVAL(, b) operators, respectively. functions creates literal temporal values. first two define instant type, third interval type. functions t_after(, b), t_before(, b), t_contains(, b), t_disjoint(, b), t_during(, b), t_equals(, b), t_finishedby(, b), t_finishes(, b), t_intersects(, b), t_meets(, b), t_meet(, b), t_metby(, b), t_overlappedby(, b), t_overlaps(, b), t_startedby(, b), t_starts(, b) corresponds CQL2 T_AFTER(, b), T_BEFORE(, b), T_CONTAINS(, b), T_DISJOINT(, b), T_DURING(, b), T_EQUALS(, b), T_FINISHEDBY(, b), T_FINISHES(, b), T_INTERSECTS(, b), T_MEETS(, b), T_MEET(, b), T_METBY(, b), T_OVERLAPPEDBY(, b), T_OVERLAPS(, b), T_STARTEDBY(, b), T_STARTS(, b) operators, respectively. , b temporal values (instant interval, depending function).","code":""},{"path":"/reference/ext_filter.html","id":"array-operators","dir":"Reference","previous_headings":"","what":"Array Operators","title":"Filter extension — ext_filter","text":"R unnamed lists (vectors size > 1) translated arrays rstac. list() c() functions always create array values CQL2 context, matter number arguments. functions a_equals(, b), a_contains(, b), a_containedby(, b), a_overlaps(, b) corresponds CQL2 A_EQUALS(, b), A_CONTAINS(, b), A_CONTAINEDBY(, b), A_OVERLAPS(, b) operators, respectively. , b arrays.","code":""},{"path":"/reference/ext_filter.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Filter extension — ext_filter","text":"specification states double quoted identifiers interpreted properties. However, R language distinguishes double quote single quote strings. right way represent double quoted properties R use escape character (), example \"date\"`.","code":""},{"path":[]},{"path":"/reference/ext_filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter extension — ext_filter","text":"","code":"if (FALSE) { # Standard comparison operators in rstac: # Creating a stac search query req <- rstac::stac(\"https://planetarycomputer.microsoft.com/api/stac/v1\") %>%   rstac::stac_search(limit = 5)  # Equal operator '=' with collection property req %>% ext_filter(collection == \"sentinel-2-l2a\") %>% post_request()  # Not equal operator '!=' with collection property req %>% ext_filter(collection != \"sentinel-2-l2a\") %>% post_request()  # Less than operator '<' with cloud_cover property req %>% ext_filter(`eo:cloud_cover` < 10) %>% post_request()  # Greater than operator '>' with vegetation_percentage property req %>% ext_filter(`s2:vegetation_percentage` > 50) %>% post_request()  # Less than or equal operator '<=' with datetime property req %>% ext_filter(datetime <= \"1986-01-01\") %>% post_request()  # Greater than or equal '>=' with AND operator req %>% ext_filter(collection == \"sentinel-2-l2a\"   &&                    `s2:vegetation_percentage` >= 50 &&                    `eo:cloud_cover` <= 10) %>% post_request() # Advanced comparison operators # 'LIKE' operator req %>% ext_filter(collection %like% \"modis%\") %>% post_request()  # 'IN' operator req %>% ext_filter(   collection %in% c(\"landsat-c2-l2\", \"sentinel-2-l2a\") &&     datetime > \"2019-01-01\" &&     datetime < \"2019-06-01\") %>%   post_request()  # Spatial operator # Lets create a polygon with list polygon <- list(   type = \"Polygon\",   coordinates = list(     matrix(c(-62.34499836, -8.57414572,              -62.18858174, -8.57414572,              -62.18858174, -8.15351185,              -62.34499836, -8.15351185,              -62.34499836, -8.57414572),            ncol = 2, byrow = TRUE)   ) ) # 'S_INTERSECTS' spatial operator with polygon and geometry property req %>% ext_filter(collection == \"sentinel-2-l2a\" &&                    s_intersects(geometry, {{polygon}})) %>% post_request()  # 'S_CONTAINS' spatial operator with point and geometry property point <- list(type = \"Point\", coordinates = c(-62.45792211, -8.61158488)) req %>% ext_filter(collection == \"landsat-c2-l2\" &&                    s_contains(geometry, {{point}})) %>% post_request()  # 'S_CROSSES' spatial operator with linestring and geometry property linestring <- list(   type = \"LineString\",   coordinates = matrix(          c(-62.55735320, -8.43329465, -62.21791603, -8.36815014),          ncol = 2, byrow = TRUE   ) ) req %>% ext_filter(collection == \"landsat-c2-l2\" &&                    s_crosses(geometry, {{linestring}})) %>% post_request()  # Temporal operator # 'T_INTERSECTS' temporal operator with datetime property req %>% ext_filter(   collection == \"landsat-c2-l2\" &&     t_intersects(datetime, interval(\"1985-07-16T05:32:00Z\",                                     \"1985-07-24T16:50:35Z\"))) %>%  post_request()  # 'T_DURING' temporal operator with datetime property req %>%  ext_filter(collection == \"landsat-c2-l2\" &&             t_during(datetime,             interval(\"2022-07-16T05:32:00Z\", \"..\"))) %>%  post_request()  # 'T_BEFORE' temporal operator with datetime property req %>%  ext_filter(collection == \"landsat-c2-l2\" &&             t_before(datetime, timestamp(\"2022-07-16T05:32:00Z\"))) %>%  post_request()  # 'T_AFTER' temporal operator with datetime property req %>%  ext_filter(collection == \"landsat-c2-l2\" &&             t_after(datetime, timestamp(\"2022-07-16T05:32:00Z\"))) %>%   post_request() }"},{"path":"/reference/ext_query.html","id":null,"dir":"Reference","previous_headings":"","what":"Query extension — ext_query","title":"Query extension — ext_query","text":"ext_query() exported function STAC API query extension. can used call stac_search() function. allows additional fields operators defined stac_search() function used make complex filter. function accepts multiple filter criteria. filter entry expression formed <field> <operator> <value>, <field> refers valid item property. Supported <fields> depends STAC API service implementation. users must rely service providers' documentation know properties can used extension. ext_query() function allows following <operators> == corresponds 'eq' != corresponds 'neq' < corresponds 'lt' <= corresponds 'lte' > corresponds 'gt' >= corresponds 'gte' \\%startsWith\\% corresponds 'startsWith' implements string prefix search operator. \\%endsWith\\% corresponds 'endsWith' implements string suffix search operator. \\%contains\\%: corresponds 'contains' implements string infix search operator. \\%\\%: corresponds '' implements vector search operator. Besides function, following S3 generic methods implemented get things done extension: endpoint() subclass ext_query before_request() subclass ext_query after_response() subclass ext_query See source file ext_query.R example implement new extensions.","code":""},{"path":"/reference/ext_query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query extension — ext_query","text":"","code":"ext_query(q, ...)"},{"path":"/reference/ext_query.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query extension — ext_query","text":"q RSTACQuery object expressing STAC query criteria. ... entries format <field> <operator> <value>.","code":""},{"path":"/reference/ext_query.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query extension — ext_query","text":"RSTACQuery object  subclass ext_query containing request parameters passed post_request() function.","code":""},{"path":[]},{"path":"/reference/ext_query.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query extension — ext_query","text":"","code":"if (FALSE) {  stac(\"https://brazildatacube.dpi.inpe.br/stac/\") %>%    stac_search(collections = \"CB4_64_16D_STK-1\") %>%    ext_query(\"bdc:tile\" %in% \"022024\") %>%    post_request() }"},{"path":"/reference/extensions.html","id":null,"dir":"Reference","previous_headings":"","what":"Document development functions — RSTACDocument","title":"Document development functions — RSTACDocument","text":"Basically, two types extensions STAC specification: STAC documents extensions: extensions can defined different elements document specification. STAC API extensions: extensions associated interaction client server API may add new elements STAC documents just filter elements returned documents. , focus second type extension. let rstac package perform behavior according STAC API extension need define functions. functions can implemented three environments: rstac package including new functions make GitHub pull request rstac repository (https://github.com/brazil-data-cube/rstac) new package using rstac dependent package script loads rstac environment places may impose specific requirements, however core logic implement extension . functions intended want implement new STAC API extensions. extension must define subclass name implement following S3 generic methods subclass: endpoint(): returns endpoint value extension. Endpoints vary STAC API versions can properly returned checking version field RSTACQuery object. before_request(): allows handling query parameters submit HTTP server; after_request(): allows check parse document received HTTP server; methods work 'behind scenes' RSTACQuery object representing user query passed request function (e.g. get_request() post_request()). calling order : begin get_request() post_request() STAC API version defined, try detect call endpoint() call before_request() send HTTP request receive HTTP response after_response() end get_request() post_request() Besides , extension must expose function receive user parameters return RSTACQuery object subclass associated S3 methods. function must accept first parameter RSTACQuery object representing actual query. keep command flow consistency, function needs check subclass input query. , must set new changes input query parameters according user input , finally, return new query RSTACQuery object. can see examples implement STAC API extension looking stac.R, collections.R, items.R, stac_search.R, ext_query.R source files. files implement core STAC API endpoints, well query API extension. also utility functions described Functions section bellow can help extension development.","code":""},{"path":"/reference/extensions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Document development functions — RSTACDocument","text":"","code":"RSTACDocument(content, q, subclass)  endpoint(q)  before_request(q)  after_response(q, res)  parse_params(q, params)  content_response(res, status_codes, content_types)  check_query_verb(q, verbs, msg = NULL)  check_subclass(x, subclasses)  subclass(x)  omit_query_params(q, names)  RSTACQuery(version = NULL, base_url, params = list(), subclass)"},{"path":"/reference/extensions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Document development functions — RSTACDocument","text":"content list data structure representing JSON file received HTTP response (see content_response() function) q RSTACQuery object. subclass character corresponding subclass object created. res httr response object. params named list URL query parameters appended URL. status_codes character vector successful status codes. content_types character vector acceptable responses' content type. verbs character vector allowed HTTP request methods msg character personalized error message x either RSTACQuery object expressing STAC query criteria RSTACDocument. subclasses character vector allowed S3 subclasses names character vector names omit. version character STAC version. base_url character informing base URL STAC web service.","code":""},{"path":"/reference/extensions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Document development functions — RSTACDocument","text":"RSTACDocument() function returns RSTACDocument object subclass defined subclass parameter. character endpoint value endpoint() function. RSTACQuery object before_request() after_response() functions. content_response() function returns list data structure representing JSON file received HTTP response RSTACQuery() function returns STACQuery object subclass defined subclass parameter.","code":""},{"path":"/reference/extensions.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Document development functions — RSTACDocument","text":"RSTACDocument(): RSTACDocument() function constructor STAC documents. Currently, five STAC documents defined: STACCatalog STACCollection STACCollectionList STACItem STACItemCollection document class associated STAC API endpoints. soon new STAC documents proposed specification, new classes can created rstac package. Let version parameter NULL detect version automatically. content_response(): content_response function checks request's response accordance allowed status codes content-types. returns parsed content response. check_query_verb(): check_query_verb() function allows define HTTP verbs allowed. useful establishing verbs supported extension. check_subclass(): check_subclass() function specifies type query objects (RSTACQuery) document objects (RSTACDocument) expected function extension. subclass(): subclass() function returns character representing subclass name either RSTACQuery RSTACDocument S3 classes. omit_query_params(): omit_query_params() function created omit paths defined query parameters simplify creation query. Therefore, use method endpoints specify parameter paths. RSTACQuery(): RSTACQuery() function constructor RSTACQuery objects. Every extension must implement subclass RSTACQuery represent queries. done informing subclass parameter extension's subclass name. params parameter named list user parameters must stored. important know previous query parameters needs keeped new query. , recommended use utils::modifyList() function merge old new query parameters. version parameter NULL, rstac detect STAC API version automatically. general, implementing new subclass, parameters version url previous query. params parameter merged previous query. subclass extension's subclass name.","code":""},{"path":[]},{"path":"/reference/items.html","id":null,"dir":"Reference","previous_headings":"","what":"Endpoint functions — items","title":"Endpoint functions — items","text":"items function implements WFS3 /collections/{collectionId}/items, /collections/{collectionId}/items/{featureId} endpoints. endpoint retrieves specific STAC objects: /collections/{collectionId}/items: Returns STAC Items collection (GeoJSON) /collections/{collectionId}/items/{itemId}: Returns STAC Item (GeoJSON Feature) endpoint /collections/{collectionId}/items accepts filters parameters stac_search() function.","code":""},{"path":"/reference/items.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Endpoint functions — items","text":"","code":"items(q, feature_id = NULL, datetime = NULL, bbox = NULL, limit = NULL)"},{"path":"/reference/items.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Endpoint functions — items","text":"q RSTACQuery object expressing STAC query criteria. feature_id character item id fetched. works collection_id informed. equivalent endpoint /collections/{collectionId}/items/{featureId}. datetime character date-time interval. Date time strings needs conform RFC 3339. Intervals expressed separating two date-time strings '/' character. Open intervals expressed using '..' place date-time. Examples: date-time: \"2018-02-12T23:20:50Z\" closed interval: \"2018-02-12T00:00:00Z/2018-03-18T12:31:12Z\" Open intervals: \"2018-02-12T00:00:00Z/..\" \"../2018-03-18T12:31:12Z\" features datetime property intersects interval date-time informed datetime selected. bbox numeric vector features geometry intersects bounding box selected. bounding box provided four six numbers, depending whether coordinate reference system includes vertical axis (elevation depth): Lower left corner, coordinate axis 1 Lower left corner, coordinate axis 2 Lower left corner, coordinate axis 3 (optional) Upper right corner, coordinate axis 1 Upper right corner, coordinate axis 2 Upper right corner, coordinate axis 3 (optional) coordinate reference system values WGS84 longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84). values cases sequence minimum longitude, minimum latitude, maximum longitude maximum latitude. However, cases box spans antimeridian first value (west-box edge) larger third value (east-box edge). limit integer defining maximum number results return. informed defaults service implementation.","code":""},{"path":"/reference/items.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Endpoint functions — items","text":"RSTACQuery object subclass items /collections/{collection_id}/items endpoint, item_id subclass /collections/{collection_id}/items/{feature_id} endpoint, containing search field parameters provided STAC API web service.","code":""},{"path":[]},{"path":"/reference/items.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Endpoint functions — items","text":"","code":"if (FALSE) {  stac(\"https://brazildatacube.dpi.inpe.br/stac/\") %>%    collections(\"CB4_64_16D_STK-1\") %>%    items(bbox = c(-47.02148, -17.35063, -42.53906, -12.98314)) %>%    get_request()   stac(\"https://brazildatacube.dpi.inpe.br/stac/\") %>%    collections(\"CB4_64_16D_STK-1\") %>%    items(\"CB4_64_16D_STK_v001_022023_2020-07-11_2020-07-26\") %>%    get_request() }"},{"path":"/reference/items_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"STACItemCollection functions — items_group","title":"STACItemCollection functions — items_group","text":"functions provide support work STACItemCollection STACItem objects. items_length(): shows many items STACItemCollection object. items_matched(): shows many items matched search criteria. supports search:metadata (v0.8.0), context (v0.9.0), numberMatched (OGC WFS3 core spec). items_fetch(): request STAC Items pagination. items_next(): fetches new page STAC service. items_datetime(): retrieves datetime field properties STACItemCollection STACItem objects. items_bbox(): retrieves bbox field STACItemCollection STACItem object. item_assets(): returns assets name STACItemCollection STACItem objects. items_filter(): selects items match criteria. items_reap(): extract key values traversing items STACItemCollection object. items_fields(): lists field names inside item. items_group():  organizes items elements list using criteria. items_sign(): allow access assets preparing url. function returns subfields feature field STACItemCollection object.","code":""},{"path":"/reference/items_functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"STACItemCollection functions — items_group","text":"","code":"items_group(items, ..., field = NULL, index = NULL)  items_length(items)  # S3 method for STACItem items_length(items)  # S3 method for STACItemCollection items_length(items)  items_matched(items, matched_field = NULL)  # S3 method for STACItem items_matched(items, matched_field = NULL)  # S3 method for STACItemCollection items_matched(items, matched_field = NULL)  items_fetch(items, ...)  # S3 method for STACItem items_fetch(items, ...)  # S3 method for STACItemCollection items_fetch(items, ..., progress = TRUE, matched_field = NULL)  items_next(items, ...)  # S3 method for STACItem items_next(items, ...)  # S3 method for STACItemCollection items_next(items, ...)  items_datetime(items)  # S3 method for STACItem items_datetime(items)  # S3 method for STACItemCollection items_datetime(items)  items_bbox(items)  # S3 method for STACItem items_bbox(items)  # S3 method for STACItemCollection items_bbox(items)  items_assets(items, simplify = TRUE)  # S3 method for STACItem items_assets(items, simplify = TRUE)  # S3 method for STACItemCollection items_assets(items, simplify = TRUE)  items_filter(items, ..., filter_fn = NULL)  items_reap(items, field = NULL, ...)  # S3 method for STACItem items_reap(items, field = NULL, ...)  # S3 method for STACItemCollection items_reap(items, field = NULL, ...)  items_fields(items, field = NULL, ...)  # S3 method for STACItemCollection items_fields(items, field = NULL, ...)  # S3 method for STACItem items_fields(items, field = NULL, ...)  items_sign(items, sign_fn = NULL)  # S3 method for STACItemCollection items_sign(items, sign_fn = NULL)  # S3 method for STACItem items_sign(items, sign_fn = NULL)"},{"path":"/reference/items_functions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"STACItemCollection functions — items_group","text":"items STACItemCollection object representing result /stac/search, /collections/{collectionId}/items. ... named way provide field names get subfields values RSTACDocument objects. field character names field get subfields values RSTACDocument objects. index atomic vector values group index matched_field character vector path number items returned named list located starting initial node list. example, information position items$meta$found object, must passed following parameter c(\"meta\", \"found\"). progress logical indicating progress bar must shown . Defaults TRUE. simplify logical return assets name first item? list assets name returned. Default FALSE. filter_fn function receives item evaluate logical value. sign_fn function receives item parameter returns item signed.","code":""},{"path":"/reference/items_functions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"STACItemCollection functions — items_group","text":"items_length(): integer value. items_matched(): returns integer value STAC web server support extension, otherwise returns NULL. items_fetch(): STACItemCollection matched items. items_next(): fetches new page STAC service. items_datetime(): list items' datetime. items_bbox(): returns list items' bounding boxes. item_assets(): simplify TRUE, returns character value assets names first item. Otherwise, returns list assets name item. items_filter(): STACItemCollection object. items_reap(): vector supplied field atomic, otherwise list. items_fields(): character vector. items_group(): list STACItemCollection objects. items_sign(): STACItemCollection object signed assets url character subfields feature field.","code":""},{"path":"/reference/items_functions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"STACItemCollection functions — items_group","text":"Ellipsis argument (...) appears different items function distinct purposes: items_matched() items_assets(): ellipsis used. items_fetch() items_next(): ellipsis used pass additional httr options GET POST methods, add_headers set_cookies. items_filter(): ellipsis used pass logical expressions using keys properties field filter criteria. items_sign(): near future, ellipsis used append key value pairs url query string asset. items_sign() sign_fn parameter must function receives argument item returns signed item. rstac provides sign_bdc() sign_planetary_computer() functions access Brazil Data Cube products Microsoft Planetary Computer catalogs, respectively.","code":""},{"path":"/reference/items_functions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"STACItemCollection functions — items_group","text":"","code":"if (FALSE) {  x <- stac(\"https://brazildatacube.dpi.inpe.br/stac\") %>%      stac_search(collections = \"CB4_64_16D_STK-1\") %>%      stac_search(limit = 500) %>%      get_request()   x %>% items_length()  x %>% items_matched()  x %>% items_datetime()  x %>% items_bbox()  x %>% items_fetch() }  if (FALSE) { # Defining BDC token Sys.setenv(\"BDC_ACCESS_KEY\" = \"token-123\")  # STACItem object stac(\"https://brazildatacube.dpi.inpe.br/stac/\") %>%     stac_search(collections = \"CB4_64_16D_STK-1\", limit = 100,         datetime = \"2017-08-01/2018-03-01\",         bbox = c(-48.206, -14.195, -45.067, -12.272)) %>%     get_request() %>% items_sign(sign_fn = sign_bdc())  }  if (FALSE) { # STACItemCollection object stac(\"https://brazildatacube.dpi.inpe.br/stac/\") %>%     stac_search(collections = \"CB4_64_16D_STK-1\", limit = 100,         datetime = \"2017-08-01/2018-03-01\",         bbox = c(-48.206, -14.195, -45.067, -12.272)) %>%     get_request() %>% items_filter(`eo:cloud_cover` < 10)  # Example with AWS STAC stac(\"https://earth-search.aws.element84.com/v0\") %>%     stac_search(collections = \"sentinel-s2-l2a-cogs\",               bbox = c(-48.206, -14.195, -45.067, -12.272),               datetime = \"2018-06-01/2018-06-30\",               limit = 500) %>%     post_request() %>%     items_filter(filter_fn = function(x) {x[[\"eo:cloud_cover\"]] < 10}) }  if (FALSE) { # STACItemCollection object stac_item <- stac(\"https://brazildatacube.dpi.inpe.br/stac/\") %>%  stac_search(collections = \"CB4_64_16D_STK-1\", limit = 100,         datetime = \"2017-08-01/2018-03-01\",         bbox = c(-48.206, -14.195, -45.067, -12.272)) %>%  get_request() %>% items_fetch(progress = FALSE)  stac_item %>% items_reap(field = c(\"properties\", \"datetime\")) }  if (FALSE) {  # STACItemCollection object  stac_item <- stac(\"https://brazildatacube.dpi.inpe.br/stac/\") %>%   stac_search(collections = \"CB4_64_16D_STK-1\", limit = 10,          datetime = \"2017-08-01/2018-03-01\") %>%   get_request()   stac_item %>% items_fields(field = \"properties\") }"},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe — %>%","title":"Pipe — %>%","text":"Magrittr compound assignment pipe-operator.","code":""},{"path":"/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe — %>%","text":"lhs, rhs visualization function apply .","code":""},{"path":"/reference/print.html","id":null,"dir":"Reference","previous_headings":"","what":"Printing functions — print","title":"Printing functions — print","text":"print function covers objects rstac package: stac(): returns STACCatalog document /stac (v0.8.0) / (v0.9.0 v1.0.0) endpoint. stac_search(): returns STACItemCollection document /stac/search (v0.8.0) /search (v0.9.0 v1.0.0) endpoint containing Items match provided search predicates. collections(): implements /collections /collections/{collectionId} endpoints. former returns STACCollectionList document lists collections published server, later returns single STACCollection document describes unique collection. items(): retrieves STACItemCollection document /collections/{collectionId}/items endpoint STACItem document /collections/{collectionId}/items/{itemId} endpoints. rstac package objects visualization based markdown, lightweight markup language. can paste output markdown editor better visualization. Call print() function print rstac's objects. can determine many items printed using n parameter.","code":""},{"path":"/reference/print.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Printing functions — print","text":"","code":"# S3 method for RSTACQuery print(x, ...)  # S3 method for STACCatalog print(x, ...)  # S3 method for STACCollectionList print(x, n = 10, ...)  # S3 method for STACCollection print(x, ...)  # S3 method for STACItemCollection print(x, n = 10, ..., tail = FALSE)  # S3 method for STACItem print(x, ...)  # S3 method for Queryables print(x, n = 10, ...)  # S3 method for Conformance print(x, n = 5, ...)"},{"path":"/reference/print.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Printing functions — print","text":"x either RSTACQuery object expressing STAC query criteria RSTACDocument. ... parameters passed functions. n number entries print. object rule truncation: STACCollection objects print 10 links default. object less 20 collections, collections shown. STACItemCollection, 10 features printed default. show entries, use n = Inf. tail logical value indicating last features STACItemCollection object must show.","code":""},{"path":[]},{"path":"/reference/print.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Printing functions — print","text":"","code":"if (FALSE) {  # STACItemCollection object  stac_item_collection <-    stac(\"https://brazildatacube.dpi.inpe.br/stac/\") %>%    stac_search(collections = \"CB4_64_16D_STK-1\",           bbox = c(-47.02148, -17.35063, -42.53906, -12.98314),           limit = 15) %>%    get_request()   print(stac_item_collection, n = 10)   # STACCollectionList object  stac_collection <-      stac(\"https://brazildatacube.dpi.inpe.br/stac/\") %>%      collections() %>%      get_request()   print(stac_collection, n = 5)   # RSTACQuery object  obj_rstac <- stac(\"https://brazildatacube.dpi.inpe.br/stac/\")   print(obj_rstac) }"},{"path":"/reference/queryables.html","id":null,"dir":"Reference","previous_headings":"","what":"Queryables endpoint — queryables","title":"Queryables endpoint — queryables","text":"queryables endpoint allows user discover properties can used filter extension. endpoint can accessed catalog (/queryables) collection (/collections/{collection_id}/queryables).","code":""},{"path":"/reference/queryables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Queryables endpoint — queryables","text":"","code":"queryables(q)"},{"path":"/reference/queryables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Queryables endpoint — queryables","text":"q RSTACQuery object expressing STAC query criteria.","code":""},{"path":"/reference/queryables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Queryables endpoint — queryables","text":"RSTACQuery object subclass queryables /queryables endpoint.","code":""},{"path":[]},{"path":"/reference/queryables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Queryables endpoint — queryables","text":"","code":"if (FALSE) { # Catalog's queryables rstac::stac(\"https://planetarycomputer.microsoft.com/api/stac/v1\") %>%   rstac::queryables() %>% rstac::get_request()  # Collection's queryables rstac::stac(\"https://planetarycomputer.microsoft.com/api/stac/v1\") %>%   rstac::collections(collection_id = \"sentinel-2-l2a\") %>%   rstac::queryables() %>%   rstac::get_request() }"},{"path":"/reference/request.html","id":null,"dir":"Reference","previous_headings":"","what":"STAC API request functions — get_request","title":"STAC API request functions — get_request","text":"get_request function makes HTTP GET requests STAC web services, retrieves, parse data. post_request function makes HTTP POST requests STAC web services, retrieves, parse data.","code":""},{"path":"/reference/request.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"STAC API request functions — get_request","text":"","code":"get_request(q, ...)  post_request(q, ..., encode = c(\"json\", \"multipart\", \"form\"))"},{"path":"/reference/request.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"STAC API request functions — get_request","text":"q RSTACQuery object expressing STAC query criteria. ... config parameters passed GET POST methods, add_headers set_cookies. encode character informing request body Content-Type. Accepted types 'json' ('application/json'), 'form' ('application/x-www-form-urlencoded'), 'multipart' ('multipart/form-data'). Defaults 'json'.","code":""},{"path":"/reference/request.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"STAC API request functions — get_request","text":"Either STACCatalog, STACCollection, STACCollectionList, STACItemCollection STACItem object depending subclass search fields parameters q argument.","code":""},{"path":[]},{"path":"/reference/request.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"STAC API request functions — get_request","text":"","code":"if (FALSE) {  stac(\"https://brazildatacube.dpi.inpe.br/stac/\") %>%   get_request()   stac(\"https://brazildatacube.dpi.inpe.br/stac/\") %>%   stac_search(collections = \"CB4_64_16D_STK-1\") %>%   post_request() }"},{"path":"/reference/rstac.html","id":null,"dir":"Reference","previous_headings":"","what":"R client library for STAC (rstac) — rstac","title":"R client library for STAC (rstac) — rstac","text":"Provides functions access, search download spacetime earth observation data via SpatioTemporal Asset Catalog (STAC). package supports version 1.0.0 STAC specification (https://github.com/radiantearth/stac-spec). details see Simoes et al. (2021) doi:10.1109/IGARSS47720.2021.9553518 .","code":""},{"path":"/reference/rstac.html","id":"the-rstac-functions","dir":"Reference","previous_headings":"","what":"The rstac functions","title":"R client library for STAC (rstac) — rstac","text":"rstac package provides two categories functions: API endpoints data access organization.","code":""},{"path":"/reference/rstac.html","id":"stac-api-endpoints-functions","dir":"Reference","previous_headings":"","what":"STAC API endpoints functions","title":"R client library for STAC (rstac) — rstac","text":"stac(): implements STAC /stac endpoint version 0.8.1 , / versions 0.9.0 higher. collections(): implements /collections /collections/{collectionId} WFS3 endpoints. items(): implements /collections/{collectionId}/items /collections/{collectionId}/items/{featureId} WFS3 endpoints. stac_search(): implements STAC /stac/search endpoint version 0.8.1 , /search endpoint versions 0.9.0 higher.","code":""},{"path":"/reference/rstac.html","id":"data-access-and-organization-functions","dir":"Reference","previous_headings":"","what":"Data access and organization functions","title":"R client library for STAC (rstac) — rstac","text":"get_request(): makes HTTP GET requests STAC web service. post_request(): makes HTTP POST requests STAC web service. items_matched(): returns many items matched search criteria. items_length(): informs many items stored locally. items_fetch(): fetches matched items service. assets_download(): download assets batch.","code":""},{"path":"/reference/rstac.html","id":"data-types","dir":"Reference","previous_headings":"","what":"Data types","title":"R client library for STAC (rstac) — rstac","text":"package implements follow S3 classes: STACItemCollection, STACItem, STACCatalog, STACCollectionList STACCollection. classes regular lists representing corresponding JSON STAC objects.","code":""},{"path":[]},{"path":"/reference/rstac.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"R client library for STAC (rstac) — rstac","text":"Maintainer: Brazil Data Cube Team brazildatacube@inpe.br contributors: National Institute Space Research (INPE) [copyright holder]","code":""},{"path":"/reference/sign_bdc.html","id":null,"dir":"Reference","previous_headings":"","what":"Signature in hrefs provided by the STAC from the Brazil Data Cube\nproject. — sign_bdc","title":"Signature in hrefs provided by the STAC from the Brazil Data Cube\nproject. — sign_bdc","text":"sign hrefs token need store environment variable BDC_ACCESS_KEYor use acess_token parameter.","code":""},{"path":"/reference/sign_bdc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Signature in hrefs provided by the STAC from the Brazil Data Cube\nproject. — sign_bdc","text":"","code":"sign_bdc(access_token = NULL, ...)"},{"path":"/reference/sign_bdc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Signature in hrefs provided by the STAC from the Brazil Data Cube\nproject. — sign_bdc","text":"access_token character access token parameter access Brazil Data Cube assets. ... additional parameters can supplied GET function httr package.","code":""},{"path":"/reference/sign_bdc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Signature in hrefs provided by the STAC from the Brazil Data Cube\nproject. — sign_bdc","text":"function signs item assets.","code":""},{"path":"/reference/sign_bdc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Signature in hrefs provided by the STAC from the Brazil Data Cube\nproject. — sign_bdc","text":"","code":"if (FALSE) {  # STACItemCollection object  stac_obj <- stac(\"https://brazildatacube.dpi.inpe.br/stac/\") %>%    stac_search(collections = \"CB4_64_16D_STK-1\",                datetime = \"2019-06-01/2019-08-01\") %>%    stac_search() %>%    get_request()   # signing each item href  stac_obj %>% items_sign(sign_fn = sign_bdc(access_token = \"123\")) }"},{"path":"/reference/sign_planetary_computer.html","id":null,"dir":"Reference","previous_headings":"","what":"Signature in hrefs provided by the STAC from Microsoft's Planetary\nComputer. — sign_planetary_computer","title":"Signature in hrefs provided by the STAC from Microsoft's Planetary\nComputer. — sign_planetary_computer","text":"perform signing hrefs request sent Planetary Computer servers returned content corresponds token used href.","code":""},{"path":"/reference/sign_planetary_computer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Signature in hrefs provided by the STAC from Microsoft's Planetary\nComputer. — sign_planetary_computer","text":"","code":"sign_planetary_computer(..., token_url = NULL)"},{"path":"/reference/sign_planetary_computer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Signature in hrefs provided by the STAC from Microsoft's Planetary\nComputer. — sign_planetary_computer","text":"... additional parameters can supplied GET function httr package. token_url character URL generates tokens Microsoft service. default used: \"https://planetarycomputer.microsoft.com/api/sas/v1/token\"","code":""},{"path":"/reference/sign_planetary_computer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Signature in hrefs provided by the STAC from Microsoft's Planetary\nComputer. — sign_planetary_computer","text":"function signs item assets.","code":""},{"path":"/reference/sign_planetary_computer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Signature in hrefs provided by the STAC from Microsoft's Planetary\nComputer. — sign_planetary_computer","text":"","code":"if (FALSE) {  # STACItemCollection object  stac_obj <- stac(\"https://planetarycomputer.microsoft.com/api/stac/v1/\") %>%   stac_search(collections = \"sentinel-2-l2a\",               bbox = c(-47.02148, -17.35063, -42.53906, -12.98314)) %>%   get_request()   # signing each item href  stac_obj %>% items_sign(sign_fn = sign_planetary_computer()) }"},{"path":"/reference/stac.html","id":null,"dir":"Reference","previous_headings":"","what":"Endpoint functions — stac","title":"Endpoint functions — stac","text":"stac function implements /stac API endpoint (>=0.8.0), / versions 0.9.0 higher. prepares search fields parameters provided STAC API web service. endpoint return STAC Catalog document containing published data catalogs.","code":""},{"path":"/reference/stac.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Endpoint functions — stac","text":"","code":"stac(base_url, force_version = NULL)"},{"path":"/reference/stac.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Endpoint functions — stac","text":"base_url character informing base url STAC web service. force_version character providing version STAC used. provided, rstac package make requests try find version STAC used. highly recommended inform STAC version using.","code":""},{"path":"/reference/stac.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Endpoint functions — stac","text":"RSTACQuery object subclass stac containing request parameters provided API service.","code":""},{"path":[]},{"path":"/reference/stac.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Endpoint functions — stac","text":"","code":"if (FALSE) {  stac(\"https://brazildatacube.dpi.inpe.br/stac/\") %>%    get_request() }"},{"path":"/reference/stac_search.html","id":null,"dir":"Reference","previous_headings":"","what":"Endpoint functions — stac_search","title":"Endpoint functions — stac_search","text":"(document based STAC specification documentation https://github.com/radiantearth/stac-spec/ reproduces parts) stac_search function implements /stac/search API endpoint (v0.8.1) /search (v0.9.0 v1.0.0). prepares query parameters used search API request, stac object filter parameters provided get_request post_request functions. GeoJSON content returned requests STACItemCollection object, regular R list representing STAC Item Collection document.","code":""},{"path":"/reference/stac_search.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Endpoint functions — stac_search","text":"","code":"stac_search(   q,   collections = NULL,   ids = NULL,   bbox = NULL,   datetime = NULL,   intersects = NULL,   limit = NULL )"},{"path":"/reference/stac_search.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Endpoint functions — stac_search","text":"q RSTACQuery object expressing STAC query criteria. collections character vector collection IDs include search items. items one provided collections searched. ids character vector item IDs. filter parameters restrict number search results ignored. bbox numeric vector features geometry intersects bounding box selected. bounding box provided four six numbers, depending whether coordinate reference system includes vertical axis (elevation depth): Lower left corner, coordinate axis 1 Lower left corner, coordinate axis 2 Lower left corner, coordinate axis 3 (optional) Upper right corner, coordinate axis 1 Upper right corner, coordinate axis 2 Upper right corner, coordinate axis 3 (optional) coordinate reference system values WGS84 longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84). values cases sequence minimum longitude, minimum latitude, maximum longitude maximum latitude. However, cases box spans antimeridian first value (west-box edge) larger third value (east-box edge). datetime character date-time interval. Date time strings needs conform RFC 3339. Intervals expressed separating two date-time strings '/' character. Open intervals expressed using '..' place date-time. Examples: date-time: \"2018-02-12T23:20:50Z\" closed interval: \"2018-02-12T00:00:00Z/2018-03-18T12:31:12Z\" Open intervals: \"2018-02-12T00:00:00Z/..\" \"../2018-03-18T12:31:12Z\" features datetime property intersects interval date-time informed datetime selected. intersects list expressing GeoJSON geometries objects specified RFC 7946. returns items intersect provided geometry. turn GeoJSON list packages geojsonsf jsonlite can used. limit integer defining maximum number results return. informed defaults service implementation.","code":""},{"path":"/reference/stac_search.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Endpoint functions — stac_search","text":"RSTACQuery object subclass search containing search field parameters provided STAC API web service.","code":""},{"path":[]},{"path":"/reference/stac_search.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Endpoint functions — stac_search","text":"","code":"if (FALSE) {  # GET request  stac(\"https://brazildatacube.dpi.inpe.br/stac/\") %>%   stac_search(collections = \"CB4_64_16D_STK-1\", limit = 10,          datetime = \"2017-08-01/2018-03-01\") %>%   get_request()   # POST request  stac(\"https://brazildatacube.dpi.inpe.br/stac/\") %>%   stac_search(collections = \"CB4_64_16D_STK-1\",          bbox = c(-47.02148, -17.35063, -42.53906, -12.98314)) %>%   post_request() }"},{"path":"/reference/utilities.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility functions — utilities","title":"Utility functions — utilities","text":"function retrieves information either rstac queries (RSTACQuery objects) rstac documents (RSTACDocument objects).","code":""},{"path":"/reference/utilities.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility functions — utilities","text":"","code":"stac_version(x, ...)"},{"path":"/reference/utilities.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility functions — utilities","text":"x either RSTACQuery object expressing STAC query criteria RSTACDocument. ... config parameters passed GET method, add_headers set_cookies.","code":""},{"path":"/reference/utilities.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility functions — utilities","text":"stac_version() function returns character STAC API version.","code":""},{"path":[]},{"path":"/news/index.html","id":"rstac-092-released-2022-12-17","dir":"Changelog","previous_headings":"","what":"rstac 0.9.2 (Released 2022-12-17)","title":"rstac 0.9.2 (Released 2022-12-17)","text":"Add support CQL2 filter extension Add conformance() function Add queryables() function minor improvements Deprecate functions: assets_filter() items_group()","code":""},{"path":"/news/index.html","id":"rstac-091-6-released-2021-11-05","dir":"Changelog","previous_headings":"","what":"rstac 0.9.1-6 (Released 2021-11-05)","title":"rstac 0.9.1-6 (Released 2021-11-05)","text":"Fix examples README bbox parameter wrong order Now items without “match” property can downloaded Introduce bbox checker Fix appveyor bug","code":""},{"path":"/news/index.html","id":"rstac-091-5-released-2021-11-01","dir":"Changelog","previous_headings":"","what":"rstac 0.9.1-5 (Released 2021-11-01)","title":"rstac 0.9.1-5 (Released 2021-11-01)","text":"CRAN release: 2021-10-31 Add support lifecycle package Documentation changed Rd markdown New functions support assets items manipulation added: assets_select, assets_filter, items_filter documentation reviewed New examples tests added rstac now supports signatures href using items_sign function Function items_bands() changed items_assets() Parameters assets_name assets_names now called asset_names Add rstac reference paper README Add feature name print items objects Create items_next function single pagination request Adjust download helpers access data Microsoft’s Planetary Computer Update news.md v0.9.0-1","code":""},{"path":"/news/index.html","id":"rstac-091-4-released-2021-09-14","dir":"Changelog","previous_headings":"","what":"rstac 0.9.1-4 (Released 2021-09-14)","title":"rstac 0.9.1-4 (Released 2021-09-14)","text":"CRAN release: 2021-07-10 Fix typos Update docs Update tests Update fixtures files","code":""},{"path":"/news/index.html","id":"rstac-091-3-released-2021-06-25","dir":"Changelog","previous_headings":"","what":"rstac 0.9.1-3 (Released 2021-06-25)","title":"rstac 0.9.1-3 (Released 2021-06-25)","text":"Fix bug related items_fetch using bbox parameter #41 Update fixtures introduces new parameter items_fetch #39","code":""},{"path":"/news/index.html","id":"rstac-091-2-released-2021-05-28","dir":"Changelog","previous_headings":"","what":"rstac 0.9.1-2 (Released 2021-05-28)","title":"rstac 0.9.1-2 (Released 2021-05-28)","text":"Fix pagination items_fetch function conform STAC API spec Improve README","code":""},{"path":"/news/index.html","id":"rstac-090-2-released-2021-03-24","dir":"Changelog","previous_headings":"","what":"rstac 0.9.0-2 (Released 2021-03-24)","title":"rstac 0.9.0-2 (Released 2021-03-24)","text":"Change version 0.9.0 0.9.0-2 DESCRIPTION Fix assets without extension assets_download function","code":""},{"path":"/news/index.html","id":"rstac-090-1-released-2020-10-20","dir":"Changelog","previous_headings":"","what":"rstac 0.9.0-1 (Released 2020-10-20)","title":"rstac 0.9.0-1 (Released 2020-10-20)","text":"Update ext_query function Add magrittr package depends Add function items_bands Introduces items_bbox items_datetime functions Update print.R file Fix items_fetch Update assets_download.R others functions Add function ‘get_assets_name’ Add overwrite items_max parameter; solve issue #10 Fix bug stac_matched update documentation Change function name .verify_datime()' parse_datetime() Rename function extension_query ext_query","code":""},{"path":"/news/index.html","id":"rstac-090-released-2020-09-18","dir":"Changelog","previous_headings":"","what":"rstac 0.9.0 (Released 2020-09-18)","title":"rstac 0.9.0 (Released 2020-09-18)","text":"CRAN release: 2020-12-14 Fix issue CRAN. Preparing package send CRAN. Update documentation. Add function extensions creating. Add new tests. Support STAC version 0.9.0 0.8.1.","code":""},{"path":"/news/index.html","id":"rstac-081-released-2020-08-24","dir":"Changelog","previous_headings":"","what":"rstac 0.8.1 (Released 2020-08-24)","title":"rstac 0.8.1 (Released 2020-08-24)","text":"Support STAC version 0.8.0 0.8.1. Add functions download support analysis items objects. Add new tests. License: MIT <https://raw.githubusercontent.com/brazil-data-cube/rstac/b-0.9.0/LICENSE>_ . Update documentation. Add CI support. Add tests CI. Unit-tests code coverage.","code":""}]
