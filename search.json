[{"path":"https://brazil-data-cube.github.io/rstac/articles/rstac-01-intro.html","id":"about-rstac","dir":"Articles","previous_headings":"","what":"About rstac","title":"Introduction to rstac package","text":"document introduce concepts rstac package. rstac R client library STAC fully supports STAC API v1.0.0 earlier versions (>= v0.8.0). table shows functions implemented rstac package according STAC API endpoints. endpoint, rstac specialized implementation. rstac package makes requests explicitly. rstac pipeline creates endpoints function concatenations requests .","code":""},{"path":"https://brazil-data-cube.github.io/rstac/articles/rstac-01-intro.html","id":"getting-started","dir":"Articles","previous_headings":"About rstac","what":"Getting started","title":"Introduction to rstac package","text":"Let’s start installing rstac package:","code":"install.packages(\"rstac\")"},{"path":"https://brazil-data-cube.github.io/rstac/articles/rstac-01-intro.html","id":"creating-queries","dir":"Articles","previous_headings":"About rstac","what":"Creating queries","title":"Introduction to rstac package","text":"tutorial use STAC API made available Brazil Data Cube (BDC) project. BDC research, development, technological innovation project National Institute Space Research (INPE), Brazil. Let’s start loading rstac creating query BDC catalog. rstac_query object stores metadata created query. metadata can accessed list element query creation. Endpoints constructed function concatenations provided rstac. examples shown :","code":"library(rstac) s_obj <- stac(\"https://brazildatacube.dpi.inpe.br/stac/\") s_obj #> ###rstac_query #> - url: https://brazildatacube.dpi.inpe.br/stac/ #> - params: #> - field(s): version, base_url, endpoint, params, verb, encode s_obj$base_url #> [1] \"https://brazildatacube.dpi.inpe.br/stac/\" s_obj %>%    collections() #> ###rstac_query #> - url: https://brazildatacube.dpi.inpe.br/stac/ #> - params: #> - field(s): version, base_url, endpoint, params, verb, encode s_obj %>%    collections(\"S2-16D-2\") #> ###rstac_query #> - url: https://brazildatacube.dpi.inpe.br/stac/ #> - params: #>   - collection_id: S2-16D-2 #> - field(s): version, base_url, endpoint, params, verb, encode s_obj %>%    collections(\"S2-16D-2\") %>%   items() #> ###rstac_query #> - url: https://brazildatacube.dpi.inpe.br/stac/ #> - params: #>   - collection_id: S2-16D-2 #> - field(s): version, base_url, endpoint, params, verb, encode s_obj %>%    collections(\"S2-16D-2\") %>%    items(feature_id = \"S2-16D_V2_015011_20190117\") #> ###rstac_query #> - url: https://brazildatacube.dpi.inpe.br/stac/ #> - params: #>   - collection_id: S2-16D-2 #>   - feature_id: S2-16D_V2_015011_20190117 #> - field(s): version, base_url, endpoint, params, verb, encode s_obj %>%    stac_search(collections = c(\"CB4-16D-2\", \"S2-16D-2\")) %>%   ext_query(\"bdc:tile\" == \"007004\") #> ###rstac_query #> - url: https://brazildatacube.dpi.inpe.br/stac/ #> - params: #>   - collections: CB4-16D-2,S2-16D-2 #>   - query: list(eq = \"007004\") #> - field(s): version, base_url, endpoint, params, verb, encode"},{"path":"https://brazil-data-cube.github.io/rstac/articles/rstac-01-intro.html","id":"making-requests","dir":"Articles","previous_headings":"About rstac","what":"Making requests","title":"Introduction to rstac package","text":"rstac package supports GET POST HTTP methods. future updates STAC specifications, intended support methods PUT DELETE. addition, possible add configuration options request, headers (httr::add_headers()) cookies (httr::set_cookies()). options available httr package documentation config.","code":""},{"path":"https://brazil-data-cube.github.io/rstac/articles/rstac-01-intro.html","id":"http-get-get_request","dir":"Articles","previous_headings":"About rstac > Making requests","what":"HTTP GET: get_request()","title":"Introduction to rstac package","text":"","code":"s_obj %>%   collections(collection_id = \"CB4-16D-2\") %>%   items() %>%   get_request()  #> ###Items #> - matched feature(s): 13258 #> - features (10 item(s) / 13248 not fetched): #>   - CB4-16D_V2_000003_20240101 #>   - CB4-16D_V2_000002_20240101 #>   - CB4-16D_V2_001003_20240101 #>   - CB4-16D_V2_000004_20240101 #>   - CB4-16D_V2_001001_20240101 #>   - CB4-16D_V2_001002_20240101 #>   - CB4-16D_V2_002000_20240101 #>   - CB4-16D_V2_002004_20240101 #>   - CB4-16D_V2_002001_20240101 #>   - CB4-16D_V2_001004_20240101 #> - assets:  #> BAND13, BAND14, BAND15, BAND16, CLEAROB, CMASK, EVI, NDVI, PROVENANCE, thumbnail, TOTALOB #> - item's fields:  #> assets, bbox, collection, geometry, id, links, properties, stac_extensions, stac_version, type"},{"path":"https://brazil-data-cube.github.io/rstac/articles/rstac-01-intro.html","id":"http-post-post_request","dir":"Articles","previous_headings":"About rstac > Making requests","what":"HTTP POST: post_request()","title":"Introduction to rstac package","text":"Example providing additional argument HTTP verb request:","code":"s_obj %>%   stac_search(     collections = c(\"CB4-16D-2\", \"S2-16D-2\"),     datetime = \"2021-01-01/2021-01-31\",     limit = 400) %>%   post_request() #> ###Items #> - matched feature(s): 1886 #> - features (400 item(s) / 1486 not fetched): #>   - CB4-16D_V2_006009_20210117 #>   - CB4-16D_V2_006006_20210117 #>   - CB4-16D_V2_006007_20210117 #>   - CB4-16D_V2_006008_20210117 #>   - CB4-16D_V2_006003_20210117 #>   - CB4-16D_V2_006004_20210117 #>   - CB4-16D_V2_006005_20210117 #>   - CB4-16D_V2_006001_20210117 #>   - CB4-16D_V2_006002_20210117 #>   - CB4-16D_V2_006000_20210117 #>   - ... with 390 more feature(s). #> - assets:  #> B01, B02, B03, B04, B05, B06, B07, B08, B09, B11, B12, B8A, BAND13, BAND14, BAND15, BAND16, CLEAROB, CMASK, EVI, NBR, NDVI, PROVENANCE, SCL, thumbnail, TOTALOB #> - item's fields:  #> assets, bbox, collection, geometry, id, links, properties, stac_extensions, stac_version, type s_obj %>%    stac_search(collections = c(\"CB4-16D-2\", \"S2-16D-2\")) %>%   post_request(config = c(httr::add_headers(\"x-api-key\" = \"MY-KEY\"))) #> ###Items #> - matched feature(s): 129101 #> - features (10 item(s) / 129091 not fetched): #>   - CB4-16D_V2_000003_20240101 #>   - CB4-16D_V2_000002_20240101 #>   - CB4-16D_V2_001003_20240101 #>   - CB4-16D_V2_000004_20240101 #>   - CB4-16D_V2_001001_20240101 #>   - CB4-16D_V2_001002_20240101 #>   - CB4-16D_V2_002000_20240101 #>   - CB4-16D_V2_002004_20240101 #>   - CB4-16D_V2_002001_20240101 #>   - CB4-16D_V2_001004_20240101 #> - assets:  #> BAND13, BAND14, BAND15, BAND16, CLEAROB, CMASK, EVI, NDVI, PROVENANCE, thumbnail, TOTALOB #> - item's fields:  #> assets, bbox, collection, geometry, id, links, properties, stac_extensions, stac_version, type"},{"path":"https://brazil-data-cube.github.io/rstac/articles/rstac-01-intro.html","id":"visualization-of-the-documents","dir":"Articles","previous_headings":"About rstac","what":"Visualization of the documents","title":"Introduction to rstac package","text":"rstac object mapped according endpoints STAC spec. way, object different view. format viewing objects Markdown.","code":""},{"path":"https://brazil-data-cube.github.io/rstac/articles/rstac-01-intro.html","id":"staccatalog-object","dir":"Articles","previous_headings":"About rstac > Visualization of the documents","what":"STACCatalog object","title":"Introduction to rstac package","text":"","code":"s_obj %>%    get_request() #> ###Catalog #> - id: bdc #> - description: Brazil Data Cube Catalog #> - field(s): description, id, stac_version, links"},{"path":"https://brazil-data-cube.github.io/rstac/articles/rstac-01-intro.html","id":"staccollection-object","dir":"Articles","previous_headings":"About rstac > Visualization of the documents","what":"STACCollection object","title":"Introduction to rstac package","text":"","code":"s_obj %>%   collections(\"S2-16D-2\") %>%   get_request() #> ###Collection #> - id: S2-16D-2 #> - title: Sentinel-2 - 10m - 16 days - v2 #> - description:  #> This datacube was generated with all available surface reflectance images processed using Sen2cor. The data is provided with 10 meters of spatial resolution, reprojected and cropped to BDC_SM grid Version 2 (BDC_SM V2), considering a temporal compositing function of 16 days using the Least Cloud Cover First (LCF) best pixel approach. #> - field(s):  #> id, stac_version, stac_extensions, title, version, deprecated, description, bdc:public, links, license, properties, extent, bdc:bands_quicklook, bdc:metadata, bdc:grs, bdc:tiles, bdc:composite_function, bdc:type, cube:dimensions, bdc:crs, bdc:temporal_composition"},{"path":"https://brazil-data-cube.github.io/rstac/articles/rstac-01-intro.html","id":"item-object","dir":"Articles","previous_headings":"About rstac > Visualization of the documents","what":"Item object","title":"Introduction to rstac package","text":"","code":"s_obj %>%   collections(\"CB4-16D-2\") %>%   items(feature_id = \"CB4-16D_V2_000002_20230509\") %>%   get_request() #> ###Item #> - id: CB4-16D_V2_000002_20230509 #> - collection: CB4-16D-2 #> - bbox:  #> xmin: -75.61346, ymin: -5.31845, xmax: -71.54176, ymax: -1.25475 #> - datetime: 2023-05-09T00:00:00 #> - assets:  #> EVI, NDVI, CMASK, BAND13, BAND14, BAND15, BAND16, CLEAROB, TOTALOB, thumbnail, PROVENANCE #> - item's fields:  #> assets, bbox, collection, geometry, id, links, properties, stac_extensions, stac_version, type"},{"path":"https://brazil-data-cube.github.io/rstac/articles/rstac-01-intro.html","id":"items-object","dir":"Articles","previous_headings":"About rstac > Visualization of the documents","what":"Items object","title":"Introduction to rstac package","text":"Besides, rstac package provides several auxiliary functions Item Items objects. auxiliary functions operate item asset level. Functions dedicated items prefix items_. Otherwise, asset-oriented functions prefix assets_","code":"s_obj %>%    stac_search(collections = c(\"CB4_64_16D_STK\", \"S2-16D-2\")) %>%   get_request() #> ###Items #> - matched feature(s): 115843 #> - features (10 item(s) / 115833 not fetched): #>   - S2-16D_V2_001014_20220930 #>   - S2-16D_V2_002011_20220930 #>   - S2-16D_V2_002012_20220930 #>   - S2-16D_V2_002013_20220930 #>   - S2-16D_V2_002014_20220930 #>   - S2-16D_V2_002015_20220930 #>   - S2-16D_V2_002016_20220930 #>   - S2-16D_V2_003011_20220930 #>   - S2-16D_V2_003012_20220930 #>   - S2-16D_V2_003013_20220930 #> - assets:  #> B01, B02, B03, B04, B05, B06, B07, B08, B09, B11, B12, B8A, CLEAROB, EVI, NBR, NDVI, PROVENANCE, SCL, thumbnail, TOTALOB #> - item's fields:  #> assets, bbox, collection, geometry, id, links, properties, stac_extensions, stac_version, type"},{"path":"https://brazil-data-cube.github.io/rstac/articles/rstac-01-intro.html","id":"items-functions","dir":"Articles","previous_headings":"About rstac","what":"Items functions","title":"Introduction to rstac package","text":"Items object facilitating functions manipulate/extract information, example: items_fields(): Lists fields names inside item. items_filter(): Performs filter items according expressions operating properties Items object. items_fetch(): Performs pagination items. items_length(): Returns number items object. items_matched(): Returns number items matching search criteria. items_assets(): Returns assets name Items Item objects. interesting verify fields items filtering: Let’s filter items percentage clouds smaller 10%: Number items returned query (case equal limit defined parameter): Number matched items query: Paginating items matched query: Note items fetched: Listing assets retrieved items:","code":"s_obj %>%   stac_search(     collections = \"CB4-16D-2\",     datetime = \"2019-01-01/2019-12-31\",     limit = 100) %>%    post_request() %>%   items_fields(field = \"properties\") #>  [1] \"bdc:tiles\"      \"created\"        \"datetime\"       \"end_datetime\"   #>  [5] \"eo:bands\"       \"eo:cloud_cover\" \"eo:gsd\"         \"instruments\"    #>  [9] \"platform\"       \"start_datetime\" \"updated\" s_obj %>%   stac_search(     collections = \"CB4-16D-2\",     datetime = \"2019-01-01/2019-12-31\",     limit = 100) %>%    post_request() %>%   items_filter(properties$`eo:cloud_cover` < 10) #> ###Items #> - matched feature(s): 1656 #> - features (55 item(s) / 1601 not fetched): #>   - CB4-16D_V2_006009_20191219 #>   - CB4-16D_V2_006006_20191219 #>   - CB4-16D_V2_006007_20191219 #>   - CB4-16D_V2_006008_20191219 #>   - CB4-16D_V2_006004_20191219 #>   - CB4-16D_V2_006005_20191219 #>   - CB4-16D_V2_007003_20191219 #>   - CB4-16D_V2_007004_20191219 #>   - CB4-16D_V2_007005_20191219 #>   - CB4-16D_V2_007006_20191219 #>   - ... with 45 more feature(s). #> - assets:  #> BAND13, BAND14, BAND15, BAND16, CLEAROB, CMASK, EVI, NDVI, PROVENANCE, thumbnail, TOTALOB #> - item's fields:  #> assets, bbox, collection, geometry, id, links, properties, stac_extensions, stac_version, type s_obj %>%   stac_search(     collections = \"CB4-16D-2\",     datetime = \"2019-01-01/2019-12-31\",     limit = 100) %>%    post_request() %>%   items_length() #> [1] 100 s_obj %>%   stac_search(     collections = \"CB4-16D-2\",     datetime = \"2019-01-01/2019-12-31\",     limit = 100) %>%   post_request() %>%   items_matched() #> [1] 1656 items_fetched <- s_obj %>%   stac_search(     collections = \"CB4-16D-2\",     datetime = \"2019-01-01/2019-12-31\",     limit = 500) %>%   post_request() %>%   items_fetch(progress = FALSE)  items_fetched #> ###Items #> - matched feature(s): 1656 #> - features (1656 item(s) / 0 not fetched): #>   - CB4-16D_V2_006009_20191219 #>   - CB4-16D_V2_006006_20191219 #>   - CB4-16D_V2_006007_20191219 #>   - CB4-16D_V2_006008_20191219 #>   - CB4-16D_V2_006003_20191219 #>   - CB4-16D_V2_006004_20191219 #>   - CB4-16D_V2_006005_20191219 #>   - CB4-16D_V2_006001_20191219 #>   - CB4-16D_V2_006002_20191219 #>   - CB4-16D_V2_006000_20191219 #>   - ... with 1646 more feature(s). #> - assets:  #> BAND13, BAND14, BAND15, BAND16, CLEAROB, CMASK, EVI, NDVI, PROVENANCE, thumbnail, TOTALOB #> - item's fields:  #> assets, bbox, collection, geometry, id, links, properties, stac_extensions, stac_version, type items_length(items_fetched) #> [1] 1656 items_assets(items_fetched) #>  [1] \"BAND13\"     \"BAND14\"     \"BAND15\"     \"BAND16\"     \"CLEAROB\"    #>  [6] \"CMASK\"      \"EVI\"        \"NDVI\"       \"PROVENANCE\" \"thumbnail\"  #> [11] \"TOTALOB\""},{"path":"https://brazil-data-cube.github.io/rstac/articles/rstac-01-intro.html","id":"assets-functions","dir":"Articles","previous_headings":"About rstac","what":"Assets functions","title":"Introduction to rstac package","text":"assets_download(): Downloads assets provided STAC API. HTTP/HTTPS files; S3 (AWS S3); GS (Google Cloud Storage). assets_select(): Selects assets item name. assets_rename(): Rename asset using named list function. Listing assets names items: Selecting assets names \"BAND14\" \"NDVI\" Listing asset urls selected bands: Renaming assets using pattern <old-name> = <new-name> assets field output can seen asset’s name changed. also possible check asset names using items_assets() function.","code":"s_obj %>%   stac_search(     collections = \"CB4-16D-2\",     datetime = \"2019-01-01/2019-12-31\",     limit = 10) %>%   post_request() %>%   items_assets() #>  [1] \"BAND13\"     \"BAND14\"     \"BAND15\"     \"BAND16\"     \"CLEAROB\"    #>  [6] \"CMASK\"      \"EVI\"        \"NDVI\"       \"PROVENANCE\" \"thumbnail\"  #> [11] \"TOTALOB\" selected_assets <- s_obj %>%   stac_search(     collections = \"CB4-16D-2\",     datetime = \"2019-01-01/2019-12-31\",     limit = 10) %>%   post_request() %>%   assets_select(asset_names = c(\"BAND14\", \"NDVI\")) items_assets(selected_assets) #> [1] \"BAND14\" \"NDVI\" selected_assets %>%    assets_url() #>  [1] \"https://brazildatacube.dpi.inpe.br/cubes/composed/cb4-16d/v2/006/009/2019/12/19/CB4-16D_V2_006009_20191219_BAND14.tif\" #>  [2] \"https://brazildatacube.dpi.inpe.br/cubes/composed/cb4-16d/v2/006/006/2019/12/19/CB4-16D_V2_006006_20191219_BAND14.tif\" #>  [3] \"https://brazildatacube.dpi.inpe.br/cubes/composed/cb4-16d/v2/006/007/2019/12/19/CB4-16D_V2_006007_20191219_BAND14.tif\" #>  [4] \"https://brazildatacube.dpi.inpe.br/cubes/composed/cb4-16d/v2/006/008/2019/12/19/CB4-16D_V2_006008_20191219_BAND14.tif\" #>  [5] \"https://brazildatacube.dpi.inpe.br/cubes/composed/cb4-16d/v2/006/003/2019/12/19/CB4-16D_V2_006003_20191219_BAND14.tif\" #>  [6] \"https://brazildatacube.dpi.inpe.br/cubes/composed/cb4-16d/v2/006/004/2019/12/19/CB4-16D_V2_006004_20191219_BAND14.tif\" #>  [7] \"https://brazildatacube.dpi.inpe.br/cubes/composed/cb4-16d/v2/006/005/2019/12/19/CB4-16D_V2_006005_20191219_BAND14.tif\" #>  [8] \"https://brazildatacube.dpi.inpe.br/cubes/composed/cb4-16d/v2/006/001/2019/12/19/CB4-16D_V2_006001_20191219_BAND14.tif\" #>  [9] \"https://brazildatacube.dpi.inpe.br/cubes/composed/cb4-16d/v2/006/002/2019/12/19/CB4-16D_V2_006002_20191219_BAND14.tif\" #> [10] \"https://brazildatacube.dpi.inpe.br/cubes/composed/cb4-16d/v2/006/000/2019/12/19/CB4-16D_V2_006000_20191219_BAND14.tif\" #> [11] \"https://brazildatacube.dpi.inpe.br/cubes/composed/cb4-16d/v2/006/009/2019/12/19/CB4-16D_V2_006009_20191219_NDVI.tif\"   #> [12] \"https://brazildatacube.dpi.inpe.br/cubes/composed/cb4-16d/v2/006/006/2019/12/19/CB4-16D_V2_006006_20191219_NDVI.tif\"   #> [13] \"https://brazildatacube.dpi.inpe.br/cubes/composed/cb4-16d/v2/006/007/2019/12/19/CB4-16D_V2_006007_20191219_NDVI.tif\"   #> [14] \"https://brazildatacube.dpi.inpe.br/cubes/composed/cb4-16d/v2/006/008/2019/12/19/CB4-16D_V2_006008_20191219_NDVI.tif\"   #> [15] \"https://brazildatacube.dpi.inpe.br/cubes/composed/cb4-16d/v2/006/003/2019/12/19/CB4-16D_V2_006003_20191219_NDVI.tif\"   #> [16] \"https://brazildatacube.dpi.inpe.br/cubes/composed/cb4-16d/v2/006/004/2019/12/19/CB4-16D_V2_006004_20191219_NDVI.tif\"   #> [17] \"https://brazildatacube.dpi.inpe.br/cubes/composed/cb4-16d/v2/006/005/2019/12/19/CB4-16D_V2_006005_20191219_NDVI.tif\"   #> [18] \"https://brazildatacube.dpi.inpe.br/cubes/composed/cb4-16d/v2/006/001/2019/12/19/CB4-16D_V2_006001_20191219_NDVI.tif\"   #> [19] \"https://brazildatacube.dpi.inpe.br/cubes/composed/cb4-16d/v2/006/002/2019/12/19/CB4-16D_V2_006002_20191219_NDVI.tif\"   #> [20] \"https://brazildatacube.dpi.inpe.br/cubes/composed/cb4-16d/v2/006/000/2019/12/19/CB4-16D_V2_006000_20191219_NDVI.tif\" renamed_assets <- selected_assets %>%    assets_rename(BAND14 = \"B14\") renamed_assets #> ###Items #> - matched feature(s): 1656 #> - features (10 item(s) / 1646 not fetched): #>   - CB4-16D_V2_006009_20191219 #>   - CB4-16D_V2_006006_20191219 #>   - CB4-16D_V2_006007_20191219 #>   - CB4-16D_V2_006008_20191219 #>   - CB4-16D_V2_006003_20191219 #>   - CB4-16D_V2_006004_20191219 #>   - CB4-16D_V2_006005_20191219 #>   - CB4-16D_V2_006001_20191219 #>   - CB4-16D_V2_006002_20191219 #>   - CB4-16D_V2_006000_20191219 #> - assets: B14, NDVI #> - item's fields:  #> assets, bbox, collection, geometry, id, links, properties, stac_extensions, stac_version, type items_assets(renamed_assets) #> [1] \"B14\"  \"NDVI\""},{"path":"https://brazil-data-cube.github.io/rstac/articles/rstac-01-intro.html","id":"asset-preview","dir":"Articles","previous_headings":"About rstac","what":"Asset preview","title":"Introduction to rstac package","text":"rstac also provides helper function plot preview assets (e.g. thumbnail quicklook).  , selected second item items_fetched’s features plotted thumbnail asset.","code":"second_item <- items_fetched$features[[2]] second_item %>%   assets_url(asset_names = \"thumbnail\") %>%   preview_plot()"},{"path":"https://brazil-data-cube.github.io/rstac/articles/rstac-01-intro.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"Introduction to rstac package","text":"rstac package can useful querying working satellite imagery data STAC APIs. offers simple interface searching STAC items, exploring results, working assets. Additional functions include reading plotting preview images. tutorial provided short introduction use package. CQL2 rstac, type command ?ext_filter.","code":""},{"path":"https://brazil-data-cube.github.io/rstac/articles/rstac-02-cql2.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"CQL2 examples","text":"CQL2 OGC standard enables complex filter expressions OAFeat3 STAC web services. CQL2 standard states expressions can represented JSON TEXT formats. implementation intends convert native R expressions CQL2 valid expressions without needing cumbersome nested lists dictionaries. Also, can make CQL2 filter requisition JSON TEXT formats filter representation.","code":""},{"path":"https://brazil-data-cube.github.io/rstac/articles/rstac-02-cql2.html","id":"translating-r-expressions-to-cql2-syntax","dir":"Articles","previous_headings":"","what":"Translating R expressions to CQL2 syntax","title":"CQL2 examples","text":"explain difference TEXT JSON CQL2 representation, let’s start simple example. following code, valid CQL2 expression (TEXT format) refers two properties, vehicle_height bridge_clearance. filter expression can passed HTTP GET verb implemented service retrieve features satisfy condition. expression can represented JSON format, suitable HTTP POST requests: Note properties vehicle_height bridge_clearance represented format. elements object containing property member. Also, go arguments operators (case,> - operators). R language, JSON represented nested lists, somewhat cumbersome write. produce valid CQL2 filter expressions, use R abstract syntax tree (AST) R expressions can converted TEXT JSON formats. Let us see previous example written R CQL2: cases, CQL2 object representation built expression using AST R expression evaluation. , object converted TEXT JSON format. CQL2 filters TEXT format sometimes represented way R expression. However, sometimes case, can see examples provided .","code":"vehicle_height > (bridge_clearance - 1)) {   \"op\": \">\",   \"args\": [     {\"property\":\"vehicle_height\"},     {       \"op\": \"-\",       \"args\": [         {\"property\":\"bridge_clearance\"},         1       ]     }   ] } library(rstac) cql2_text(vehicle_height > (bridge_clearance - 1)) # TEXT format #> vehicle_height > bridge_clearance - 1 cql2_json(vehicle_height > (bridge_clearance - 1)) # JSON format #> {\"op\":\">\",\"args\":[{\"property\":\"vehicle_height\"},{\"op\":\"-\",\"args\":[{\"property\":\"bridge_clearance\"},1]}]}"},{"path":"https://brazil-data-cube.github.io/rstac/articles/rstac-02-cql2.html","id":"data-types-and-literal-values","dir":"Articles","previous_headings":"Translating R expressions to CQL2 syntax","what":"Data types and literal values","title":"CQL2 examples","text":"literal value part CQL2 filter expression used specified expression. scalar data types : character string, number, boolean, timestamp, date. character string number boolean timestamp date","code":"cql2_text(\"Via dell'Avvento\") #> 'Via dell''Avvento' cql2_json(\"Via dell'Avvento\") #> \"Via dell'Avvento\" cql2_text(3.1415) #> 3.1415 cql2_json(-100) #> -100 cql2_text(TRUE) #> true cql2_json(FALSE) #> false cql2_text(timestamp(\"1969-07-20T20:17:40Z\")) #> TIMESTAMP('1969-07-20T20:17:40Z') cql2_json(timestamp(\"1969-07-20T20:17:40Z\")) #> {\"timestamp\":\"1969-07-20T20:17:40Z\"} cql2_text(date(\"1969-07-20\")) #> DATE('1969-07-20') cql2_json(date(\"1969-07-20\")) #> {\"date\":\"1969-07-20\"}"},{"path":"https://brazil-data-cube.github.io/rstac/articles/rstac-02-cql2.html","id":"property-references","dir":"Articles","previous_headings":"Translating R expressions to CQL2 syntax","what":"Property references","title":"CQL2 examples","text":"property item can evaluated CQL2 filter expression name.","code":"cql2_text(windSpeed > 1) #> windSpeed > 1 cql2_json(windSpeed > 1) #> {\"op\":\">\",\"args\":[{\"property\":\"windSpeed\"},1]}"},{"path":"https://brazil-data-cube.github.io/rstac/articles/rstac-02-cql2.html","id":"standard-comparison-predicates","dir":"Articles","previous_headings":"Translating R expressions to CQL2 syntax","what":"Standard comparison predicates","title":"CQL2 examples","text":"comparison predicate evaluates two scalar expressions satisfy specified comparison operator. standard comparison operators : =, !=, <, >, <=, >=, NULL. NULL operator","code":"cql2_text(city == \"Crato\") #> city = 'Crato' cql2_json(city == \"Jacareí\") #> {\"op\":\"=\",\"args\":[{\"property\":\"city\"},\"Jacareí\"]} cql2_text(avg(windSpeed) < 4) #> avg(windSpeed) < 4 cql2_json(avg(windSpeed) < 4) #> {\"op\":\"<\",\"args\":[{\"function\":{\"name\":\"avg\",\"args\":[{\"property\":\"windSpeed\"}]}},4]} cql2_text(balance - 150.0 > 0) #> balance - 150 > 0 cql2_json(balance - 150.0 > 0) #> {\"op\":\">\",\"args\":[{\"op\":\"-\",\"args\":[{\"property\":\"balance\"},150]},0]} cql2_text(updated >= date('1970-01-01')) #> updated >= DATE('1970-01-01') cql2_json(updated >= date('1970-01-01')) #> {\"op\":\">=\",\"args\":[{\"property\":\"updated\"},{\"date\":\"1970-01-01\"}]} cql2_text(!is_null(geometry)) #> geometry IS NOT NULL cql2_json(!is_null(geometry)) #> {\"op\":\"not\",\"args\":[{\"op\":\"isNull\",\"args\":[{\"property\":\"geometry\"}]}]}"},{"path":"https://brazil-data-cube.github.io/rstac/articles/rstac-02-cql2.html","id":"advanced-comparison-operators","dir":"Articles","previous_headings":"Translating R expressions to CQL2 syntax","what":"Advanced comparison operators","title":"CQL2 examples","text":"comparison predicate evaluates two scalar expressions satisfy specified comparison operator. Advanced comparison operators : LIKE, , . LIKE operator operator operator","code":"cql2_text(name %like% \"Smith%\") #> name LIKE 'Smith%' cql2_json(name %like% \"Smith%\") #> {\"op\":\"like\",\"args\":[{\"property\":\"name\"},\"Smith%\"]} cql2_text(between(depth, 100.0, 150.0)) #> depth BETWEEN 100 AND 150 cql2_json(between(depth, 100.0, 150.0)) #> {\"op\":\"between\",\"args\":[{\"property\":\"depth\"},100,150]} cql2_text(cityName %in% list('Toronto', 'Frankfurt', 'Tokyo', 'New York')) #> cityName IN ('Toronto','Frankfurt','Tokyo','New York') cql2_json(cityName %in% list('Toronto', 'Frankfurt', 'Tokyo', 'New York')) #> {\"op\":\"in\",\"args\":[{\"property\":\"cityName\"},[\"Toronto\",\"Frankfurt\",\"Tokyo\",\"New York\"]]} cql2_text(!category %in% list(1, 2, 3, 4)) #> category NOT IN (1,2,3,4) cql2_json(!category %in% list(1, 2, 3, 4)) #> {\"op\":\"not\",\"args\":[{\"op\":\"in\",\"args\":[{\"property\":\"category\"},[1,2,3,4]]}]}"},{"path":"https://brazil-data-cube.github.io/rstac/articles/rstac-02-cql2.html","id":"spatial-operators","dir":"Articles","previous_headings":"Translating R expressions to CQL2 syntax","what":"Spatial operators","title":"CQL2 examples","text":"spatial predicate evaluates two spatial expressions satisfy specified spatial operator. supported spatial operators : S_INTERSECTS, S_EQUALS, S_DISJOINT, S_TOUCHES, S_WITHIN, S_OVERLAPS, S_CROSSES, S_CONTAINS. Note: provide escape evaluate user variables using {{ !!. symbols largely used R Data Science community.","code":"poly <- list(   type = \"Polygon\",   coordinates = list(     rbind(       c(0,0),       c(0,1),       c(0,1)     )   )) cql2_text(s_intersects(geometry, {{poly}})) #> S_INTERSECTS(geometry,POLYGON((0 0,0 1,0 1))) cql2_json(s_intersects(geometry, {{poly}})) #> {\"op\":\"s_intersects\",\"args\":[{\"property\":\"geometry\"},{\"type\":\"Polygon\",\"coordinates\":[[[0,0],[0,1],[0,1]]]}]}"},{"path":"https://brazil-data-cube.github.io/rstac/articles/rstac-02-cql2.html","id":"temporal-operators","dir":"Articles","previous_headings":"Translating R expressions to CQL2 syntax","what":"Temporal operators","title":"CQL2 examples","text":"temporal predicate evaluates two temporal expressions satisfy specified temporal operator. supported temporal operators : T_AFTER, T_BEFORE, T_CONTAINS, T_DISJOINT, T_DURING, T_EQUALS, T_FINISHEDBY, T_FINISHES, T_INTERSECTS, T_MEETS, T_METBY, T_OVERLAPPEDBY, T_OVERLAPS, T_STARTEDBY, T_STARTS.","code":"cql2_text(t_intersects(event_date, interval(\"1969-07-16T05:32:00Z\", \"1969-07-24T16:50:35Z\"))) #> T_INTERSECTS(event_date,INTERVAL('1969-07-16T05:32:00Z','1969-07-24T16:50:35Z')) cql2_json(t_intersects(event_date, interval(\"1969-07-16T05:32:00Z\", \"1969-07-24T16:50:35Z\"))) #> {\"op\":\"t_intersects\",\"args\":[{\"property\":\"event_date\"},{\"interval\":[\"1969-07-16T05:32:00Z\",\"1969-07-24T16:50:35Z\"]}]}"},{"path":"https://brazil-data-cube.github.io/rstac/articles/rstac-02-cql2.html","id":"support-for-functions-in-cql2","dir":"Articles","previous_headings":"Translating R expressions to CQL2 syntax","what":"Support for functions in CQL2","title":"CQL2 examples","text":"Functions allow implementations extend language. Example function returns geometry value.","code":"cql2_text(s_within(road, Buffer(geometry, 10, \"m\"))) #> S_WITHIN(road,Buffer(geometry,10,'m')) cql2_json(s_within(road, Buffer(geometry, 10, \"m\"))) #> {\"op\":\"s_within\",\"args\":[{\"property\":\"road\"},{\"function\":{\"name\":\"Buffer\",\"args\":[{\"property\":\"geometry\"},10,\"m\"]}}]}"},{"path":"https://brazil-data-cube.github.io/rstac/articles/rstac-02-cql2.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"CQL2 examples","text":"conclusion, tutorial demonstrated using rstac package build CQL2 expressions, making easier R users write syntactically correct filter criteria STAC services. functionality can alternative users construct CQL2 expressions easily efficiently. CQL2 rstac, type command ?ext_filter.","code":""},{"path":"https://brazil-data-cube.github.io/rstac/articles/rstac-03-cql2-mpc.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Reading Planetary Computer Data using CQL2 filter extension","text":"tutorial use open-source package rstac search data Planetary Computer’s SpatioTemporal Asset Catalog (STAC) service. STAC services can accessed STAC API endpoints, allow users search datasets using various parameters space time. addition demonstrating use rstac, tutorial explain Common Query Language (CQL2) filter extension narrow search results find datasets meet specific criteria STAC API. tutorial based reading STAC API data Python.","code":""},{"path":"https://brazil-data-cube.github.io/rstac/articles/rstac-03-cql2-mpc.html","id":"reading-data-from-stac-api","dir":"Articles","previous_headings":"","what":"Reading data from STAC API","title":"Reading Planetary Computer Data using CQL2 filter extension","text":"access Planetary Computer STAC API, ’ll create rstac query.","code":"planetary_computer <- stac(\"https://planetarycomputer.microsoft.com/api/stac/v1\") planetary_computer #> ###rstac_query #> - url: https://planetarycomputer.microsoft.com/api/stac/v1/ #> - params: #> - field(s): version, base_url, endpoint, params, verb, encode"},{"path":"https://brazil-data-cube.github.io/rstac/articles/rstac-03-cql2-mpc.html","id":"listing-supported-properties-in-cql2","dir":"Articles","previous_headings":"Reading data from STAC API","what":"Listing supported properties in CQL2","title":"Reading Planetary Computer Data using CQL2 filter extension","text":"CQL2 expressions can constructed using properties refer attributes items. list properties supported collection can obtained accessing /collections/<collection_id>/queryables endpoint. Filter expressions can use properties listed endpoint. example, search Landsat Collection 2 Level-2 imagery Microsoft main campus December 2020. name collection STAC service landsat-c2-l2. ’ll prepare query retrieve queryables make GET request service.","code":"planetary_computer %>%   collections(\"landsat-c2-l2\") %>%    queryables() %>%    get_request() #> ###Queryables #> - properties (27 entries(s)): #>   - id #>   - gsd #>   - created #>   - sci:doi #>   - datetime #>   - geometry #>   - platform #>   - proj:epsg #>   - instrument #>   - proj:shape #>   - ... with 17 more entry(ies). #> - field(s): $id, type, title, $schema, properties"},{"path":"https://brazil-data-cube.github.io/rstac/articles/rstac-03-cql2-mpc.html","id":"searching-with-cql2","dir":"Articles","previous_headings":"Reading data from STAC API","what":"Searching with CQL2","title":"Reading Planetary Computer Data using CQL2 filter extension","text":"Now can use rstac make search query CQL2 filter extension obtain items. example, filter expression used temporal (t_intersects) spatial (s_intersects) operators. t_intersects() accepts interval second argument, created using function cql2_interval(). s_intersects() spatial operator accepts GeoJSON objects arguments. convert bounding box vector (bbox) structure representing GeoJSON object using function cql2_bbox_as_geojson(). embrace arguments using {{ evaluate make request. items Items object containing 8 items matched search criteria.","code":"time_range <- cql2_interval(\"2020-12-01\", \"2020-12-31\") bbox <- c(-122.2751, 47.5469, -121.9613, 47.7458) area_of_interest = cql2_bbox_as_geojson(bbox)  stac_items <- planetary_computer %>%   ext_filter(     collection == \"landsat-c2-l2\" &&       t_intersects(datetime, {{time_range}}) &&       s_intersects(geometry, {{area_of_interest}})   ) %>%   post_request() stac_items #> ###Items #> - features (8 item(s)): #>   - LC08_L2SP_046027_20201229_02_T2 #>   - LE07_L2SP_047027_20201228_02_T1 #>   - LE07_L2SP_046027_20201221_02_T2 #>   - LC08_L2SP_047027_20201220_02_T2 #>   - LC08_L2SP_046027_20201213_02_T2 #>   - LE07_L2SP_047027_20201212_02_T1 #>   - LE07_L2SP_046027_20201205_02_T1 #>   - LC08_L2SP_047027_20201204_02_T1 #> - assets:  #> ang, atmos_opacity, atran, blue, cdist, cloud_qa, coastal, drad, emis, emsd, green, lwir, lwir11, mtl.json, mtl.txt, mtl.xml, nir08, qa, qa_aerosol, qa_pixel, qa_radsat, red, rendered_preview, swir16, swir22, tilejson, trad, urad #> - item's fields:  #> assets, bbox, collection, geometry, id, links, properties, stac_extensions, stac_version, type"},{"path":"https://brazil-data-cube.github.io/rstac/articles/rstac-03-cql2-mpc.html","id":"exploring-data","dir":"Articles","previous_headings":"Reading data from STAC API","what":"Exploring data","title":"Reading Planetary Computer Data using CQL2 filter extension","text":"Items regular GeoJSON object. collection Item entries stores metadata assets. Users can convert Items sf object containing properties field columns. depict items footprint. collections use eo extension, allows us sort items attributes like cloud coverage. next example selects item lowest cloud_cover attribute: use function items_reap() extract cloud cover values features. STAC item assets field describes files provides link access . , ’ll inspect rendered_preview asset. plot asset, can use helper function preview_plot() provide URL plotted. use function assets_url() get URL. function extracts available URLs items.  rendered_preview asset generated dynamically Planetary Computer API using raw data. can access raw data, stored Cloud Optimized GeoTIFFs (COG) Azure Blob Storage, using assets. assets private Azure Blob Storage containers necessary sign access data, otherwise, ’ll get 404 (forbidden) status code.","code":"sf <- items_as_sf(stac_items)  # create a function to plot a map plot_map <- function(x) {   tmap_mode(\"view\")   tm_basemap(providers[[\"Stamen.Watercolor\"]]) +     tm_shape(x) +      tm_borders() }  plot_map(sf) #> tmap mode set to interactive viewing cloud_cover <- stac_items %>%   items_reap(field = c(\"properties\", \"eo:cloud_cover\")) selected_item <- stac_items$features[[which.min(cloud_cover)]] items_assets(selected_item) #>  [1] \"qa\"               \"ang\"              \"red\"              \"blue\"             #>  [5] \"drad\"             \"emis\"             \"emsd\"             \"trad\"             #>  [9] \"urad\"             \"atran\"            \"cdist\"            \"green\"            #> [13] \"nir08\"            \"lwir11\"           \"swir16\"           \"swir22\"           #> [17] \"coastal\"          \"mtl.txt\"          \"mtl.xml\"          \"mtl.json\"         #> [21] \"qa_pixel\"         \"qa_radsat\"        \"qa_aerosol\"       \"tilejson\"         #> [25] \"rendered_preview\"  map_dfr(items_assets(selected_item), function(key) {   tibble(asset = key, description = selected_item$assets[[key]]$title) }) #> # A tibble: 25 × 2 #>    asset description                                 #>    <chr> <chr>                                       #>  1 qa    Surface Temperature Quality Assessment Band #>  2 ang   Angle Coefficients File                     #>  3 red   Red Band                                    #>  4 blue  Blue Band                                   #>  5 drad  Downwelled Radiance Band                    #>  6 emis  Emissivity Band                             #>  7 emsd  Emissivity Standard Deviation Band          #>  8 trad  Thermal Radiance Band                       #>  9 urad  Upwelled Radiance Band                      #> 10 atran Atmospheric Transmittance Band              #> # ℹ 15 more rows selected_item$assets[[\"rendered_preview\"]]$href #> [1] \"https://planetarycomputer.microsoft.com/api/data/v1/item/preview.png?collection=landsat-c2-l2&item=LC08_L2SP_047027_20201204_02_T1&assets=red&assets=green&assets=blue&color_formula=gamma+RGB+2.7%2C+saturation+1.5%2C+sigmoidal+RGB+15+0.55&format=png\"  selected_item %>%    assets_url(asset_names = \"rendered_preview\") %>%   preview_plot()"},{"path":"https://brazil-data-cube.github.io/rstac/articles/rstac-03-cql2-mpc.html","id":"signing-items","dir":"Articles","previous_headings":"Reading data from STAC API","what":"Signing items","title":"Reading Planetary Computer Data using CQL2 filter extension","text":"sign URL rstac, can use items_sign() function. Everything ? URL SAS token grants access data. See https://planetarycomputer.microsoft.com/docs/concepts/sas/ using tokens access data. 200 status code means able access data using signed URL SAS token included.","code":"selected_item <- selected_item %>%   items_sign(sign_fn = sign_planetary_computer())  selected_item %>%    assets_url(asset_names = \"blue\") %>%   substr(1, 255) #> [1] \"https://landsateuwest.blob.core.windows.net/landsat-c2/level-2/standard/oli-tirs/2020/047/027/LC08_L2SP_047027_20201204_20210313_02_T1/LC08_L2SP_047027_20201204_20210313_02_T1_SR_B2.TIF?st=2024-07-17T19%3A33%3A24Z&se=2024-07-18T20%3A18%3A24Z&sp=rl&sv=2024\" selected_item %>%    assets_url(asset_names = \"blue\") %>%   HEAD() %>%   status_code() #> [1] 200"},{"path":"https://brazil-data-cube.github.io/rstac/articles/rstac-03-cql2-mpc.html","id":"reading-files","dir":"Articles","previous_headings":"Reading data from STAC API","what":"Reading files","title":"Reading Planetary Computer Data using CQL2 filter extension","text":"can load single COG file using packages like stars terra.  used assets_url() method append_gdalvsi = TRUE parameter insert /vsicurl URL. allows GDAL VSI driver access data using HTTP.","code":"selected_item %>%    assets_url(asset_names = \"blue\", append_gdalvsi = TRUE) %>%   read_stars(RasterIO = list(nBufXSize = 512, nBufYSize = 512)) %>%   plot(main = \"blue\")"},{"path":"https://brazil-data-cube.github.io/rstac/articles/rstac-03-cql2-mpc.html","id":"searching-on-additional-properties","dir":"Articles","previous_headings":"","what":"Searching on additional properties","title":"Reading Planetary Computer Data using CQL2 filter extension","text":"previous step tutorial, learned search items specifying space time parameters. However, Planetary Computer’s STAC API offers even flexibility allowing search items based additional properties. instance, collections like sentinel-2-l2a landsat-c2-l2 implement eo STAC extension include eo:cloud_cover property. filter search results return items cloud coverage less 20%, can use: search sentinel-2-l2a landsat-c2-l2 assets. result, images collections search results. Users can rename assets common name collections. assets_rename() uses parameter mapper used rename asset names. parameter can either named list function called asset metadata. last parameter included force band renaming.","code":"stac_items <- planetary_computer %>%   ext_filter(     collection %in% c(\"sentinel-2-l2a\", \"landsat-c2-l2\") &&       t_intersects(datetime, {{time_range}}) &&       s_intersects(geometry, {{area_of_interest}}) &&       `eo:cloud_cover` < 20   ) %>%   post_request() stac_items <- stac_items %>%   assets_select(asset_names = c(\"B11\", \"swir16\")) %>%   assets_rename(B11 = \"swir16\")  stac_items %>%   items_assets() #> [1] \"swir16\""},{"path":"https://brazil-data-cube.github.io/rstac/articles/rstac-03-cql2-mpc.html","id":"analyzing-stac-metadata","dir":"Articles","previous_headings":"Searching on additional properties","what":"Analyzing STAC Metadata","title":"Reading Planetary Computer Data using CQL2 filter extension","text":"Item objects features Items store information assets. can use metadata plot cloud cover region time, example.  cql2_bbox_as_geojson() rstac helper function must evaluated request. embraced {{. use items_fetch() retrieve paginated items matched search.","code":"stac_items <- planetary_computer %>%   ext_filter(     collection == \"sentinel-2-l2a\" &&       t_intersects(datetime, interval(\"2020-01-01\", \"2020-12-31\")) &&       s_intersects(geometry, {{         cql2_bbox_as_geojson(c(-124.2751, 45.5469, -123.9613, 45.7458))       }})   ) %>%   post_request()  stac_items <- items_fetch(stac_items) df <- items_as_sf(stac_items)  %>%   mutate(datetime = as.Date(datetime)) %>%   group_by(datetime) %>%   summarise(`eo:cloud_cover` = mean(`eo:cloud_cover`)) %>%   mutate(`eo:cloud_cover` = slide_mean(`eo:cloud_cover`, before = 3, after = 3))  df %>%    ggplot() +   geom_line(aes(x = datetime, y = `eo:cloud_cover`))"},{"path":"https://brazil-data-cube.github.io/rstac/articles/rstac-03-cql2-mpc.html","id":"working-with-stac-catalogs-and-collections","dir":"Articles","previous_headings":"","what":"Working with STAC Catalogs and Collections","title":"Reading Planetary Computer Data using CQL2 filter extension","text":"STAC organizes items catalogs (STACCatalog) collections (STACCollection). JSON documents contains metadata dataset refer . instance, look Bands available Landsat 8 Collection 2 Level 2 data: can see Assets available item : collections, like Daymet include collection-level assets. can use assets property access assets. Just like assets items, assets include links data Azure Blob Storage.","code":"landsat <- planetary_computer %>%   collections(collection_id = \"landsat-c2-l2\") %>%   get_request()  map_dfr(landsat$summaries$`eo:bands`, as_tibble) #> # A tibble: 22 × 5 #>    name   common_name description          center_wavelength full_width_half_max #>    <chr>  <chr>       <chr>                            <dbl>               <dbl> #>  1 TM_B1  blue        Visible blue (Thema…              0.49                0.07 #>  2 TM_B2  green       Visible green (Them…              0.56                0.08 #>  3 TM_B3  red         Visible red (Themat…              0.66                0.06 #>  4 TM_B4  nir08       Near infrared (Them…              0.83                0.14 #>  5 TM_B5  swir16      Short-wave infrared…              1.65                0.2  #>  6 TM_B6  lwir        Long-wave infrared …             11.4                 2.1  #>  7 TM_B7  swir22      Short-wave infrared…              2.22                0.27 #>  8 ETM_B1 blue        Visible blue (Enhan…              0.48                0.07 #>  9 ETM_B2 green       Visible green (Enha…              0.56                0.08 #> 10 ETM_B3 red         Visible red (Enhanc…              0.66                0.06 #> # ℹ 12 more rows map_dfr(landsat$item_assets, function(x) {     as_tibble(       compact(x[c(\"title\", \"description\", \"gsd\")])     ) }) #> # A tibble: 25 × 3 #>    title                                       description                   gsd #>    <chr>                                       <chr>                       <int> #>  1 Surface Temperature Quality Assessment Band Collection 2 Level-2 Quali…    NA #>  2 Angle Coefficients File                     Collection 2 Level-1 Angle…    NA #>  3 Red Band                                    NA                             NA #>  4 Blue Band                                   NA                             NA #>  5 Downwelled Radiance Band                    Collection 2 Level-2 Downw…    NA #>  6 Emissivity Band                             Collection 2 Level-2 Emiss…    NA #>  7 Emissivity Standard Deviation Band          Collection 2 Level-2 Emiss…    NA #>  8 Surface Temperature Band                    Collection 2 Level-2 Therm…    NA #>  9 Thermal Radiance Band                       Collection 2 Level-2 Therm…    NA #> 10 Upwelled Radiance Band                      Collection 2 Level-2 Upwel…    NA #> # ℹ 15 more rows daymet <- planetary_computer %>%   collections(collection_id = \"daymet-daily-na\") %>%   get_request()  daymet #> ###Collection #> - id: daymet-daily-na #> - title: Daymet Daily North America #> - description:  #> Gridded estimates of daily weather parameters. [Daymet](https://daymet.ornl.gov) Version 4 variables include the following parameters: minimum temperature, maximum temperature, precipitation, shortwave radiation, vapor pressure, snow water equivalent, and day length. #>  #> [Daymet](https://daymet.ornl.gov/) provides measurements of near-surface meteorological conditions; the main purpose is to provide data estimates where no instrumentation exists. The dataset covers the period from January 1, 1980 to the present. Each year is processed individually at the close of a calendar year. Data are in a Lambert conformal conic projection for North America and are distributed in Zarr and NetCDF formats, compliant with the [Climate and Forecast (CF) metadata conventions (version 1.6)](http://cfconventions.org/). #>  #> Use the DOI at [https://doi.org/10.3334/ORNLDAAC/1840](https://doi.org/10.3334/ORNLDAAC/1840) to cite your usage of the data. #>  #> This dataset provides coverage for Hawaii; North America and Puerto Rico are provided in [separate datasets](https://planetarycomputer.microsoft.com/dataset/group/daymet#daily). #>  #>  #> - field(s):  #> id, type, links, title, assets, extent, license, sci:doi, keywords, providers, description, sci:citation, stac_version, msft:group_id, cube:variables, msft:container, cube:dimensions, msft:group_keys, stac_extensions, msft:storage_account, msft:short_description, msft:region items_assets(daymet) #> [1] \"thumbnail\"  \"zarr-abfs\"  \"zarr-https\"  daymet %>%   assets_select(asset_names = \"zarr-abfs\") %>%   assets_url() #> [1] \"abfs://daymet-zarr/daily/na.zarr\""},{"path":"https://brazil-data-cube.github.io/rstac/articles/rstac-03-cql2-mpc.html","id":"learn-more","dir":"Articles","previous_headings":"","what":"Learn more","title":"Reading Planetary Computer Data using CQL2 filter extension","text":"Planetary Computer’s STAC API, see Using tokens data access STAC API reference. CQL2 rstac, type command ?ext_filter.","code":""},{"path":"https://brazil-data-cube.github.io/rstac/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Rolf Simoes. Author. Felipe Carvalho. Author, maintainer. Brazil Data Cube Team. Author. National Institute Space Research (INPE). Copyright holder.","code":""},{"path":"https://brazil-data-cube.github.io/rstac/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"R. Simoes, F. C. de Souza, M. Zaglia, G. R. de Queiroz, R. D. C. dos Santos K. R. Ferreira, \"Rstac: R Package Access Spatiotemporal Asset Catalog Satellite Imagery,\" 2021 IEEE International Geoscience Remote Sensing Symposium IGARSS, 2021, pp. 7674-7677, doi: 10.1109/IGARSS47720.2021.9553518.","code":"@InProceedings{,   title = {Rstac: An R Package to Access Spatiotemporal Asset Catalog Satellite Imagery},   author = {Rolf Simoes and Felipe Souza and Matheus Zaglia and Gilberto Ribeiro Queiroz and Rafael Santos and Karine Ferreira},   booktitle = {2021 IEEE International Geoscience and Remote Sensing Symposium IGARSS},   year = {2021},   pages = {7674-7677},   doi = {10.1109/IGARSS47720.2021.9553518}, }"},{"path":"https://brazil-data-cube.github.io/rstac/index.html","id":"rstac-","dir":"","previous_headings":"","what":"Client Library for SpatioTemporal Asset Catalog","title":"Client Library for SpatioTemporal Asset Catalog","text":"R Client Library SpatioTemporal Asset Catalog (rstac) STAC specification files web services used describe geospatial information assets. specification can consulted https://stacspec.org/. R client library STAC (rstac) designed fully support STAC API v1.0.0. also supports earlier versions (>= v0.8.0).","code":""},{"path":"https://brazil-data-cube.github.io/rstac/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Client Library for SpatioTemporal Asset Catalog","text":"","code":"# install via CRAN  install.packages(\"rstac\")"},{"path":"https://brazil-data-cube.github.io/rstac/index.html","id":"development-version","dir":"","previous_headings":"Installation","what":"Development version","title":"Client Library for SpatioTemporal Asset Catalog","text":"install development version rstac, run following commands Importing rstac package:","code":"remotes::install_github(\"brazil-data-cube/rstac\") library(rstac)"},{"path":"https://brazil-data-cube.github.io/rstac/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Client Library for SpatioTemporal Asset Catalog","text":"rstac implements following STAC endpoints: functions can used retrieve information STAC API service. code creates stac object list available collections STAC API Brazil Data Cube project Brazilian National Space Research Institute (INPE). variable s_obj stores information connect Brazil Data Cube STAC web service. get_request method makes HTTP GET connection retrieves STAC Catalog document server. links entry available collection can accessed via STAC API. code , get STAC items CB4-16D-2 collection intersects bounding box passed bbox parameter. , call stac_search function implements STAC /search endpoint. returned document STAC Item Collection (geojson containing feature collection). rstac uses httr package manage HTTP requests, allowing use tokens authorization protocols OAuth 1.0 2.0 well configuration options. code , present example pass parameter token HTTP request. addition functions mentioned , rstac package provides extra functions handling items bulk download assets.","code":"s_obj <- stac(\"https://brazildatacube.dpi.inpe.br/stac/\")  get_request(s_obj) #> ###Catalog #> - id: bdc #> - description: Brazil Data Cube Catalog #> - field(s): description, id, stac_version, links it_obj <- s_obj %>%   stac_search(collections = \"CB4-16D-2\",               bbox = c(-47.02148, -17.35063, -42.53906, -12.98314),               limit = 100) %>%    get_request()  it_obj #> ###Items #> - matched feature(s): 1096 #> - features (100 item(s) / 996 not fetched): #>   - CB4-16D_V2_007004_20240101 #>   - CB4-16D_V2_007005_20240101 #>   - CB4-16D_V2_007006_20240101 #>   - CB4-16D_V2_008004_20240101 #>   - CB4-16D_V2_008006_20240101 #>   - CB4-16D_V2_008005_20240101 #>   - CB4-16D_V2_007004_20231219 #>   - CB4-16D_V2_007006_20231219 #>   - CB4-16D_V2_007005_20231219 #>   - CB4-16D_V2_008004_20231219 #>   - ... with 90 more feature(s). #> - assets:  #> BAND13, BAND14, BAND15, BAND16, CLEAROB, CMASK, EVI, NDVI, PROVENANCE, thumbnail, TOTALOB #> - item's fields:  #> assets, bbox, collection, geometry, id, links, properties, stac_extensions, stac_version, type it_obj <- s_obj %>%   stac_search(collections = \"CB4-16D-2\",               bbox = c(-47.02148, -17.35063, -42.53906, -12.98314)) %>%   get_request(add_headers(\"x-api-key\" = \"MY-TOKEN\"))"},{"path":"https://brazil-data-cube.github.io/rstac/index.html","id":"items-functions","dir":"","previous_headings":"Usage","what":"Items functions","title":"Client Library for SpatioTemporal Asset Catalog","text":"rstac provides functions facilitates interaction STAC data. example , get many items matched search criteria: However, count many items it_obj variable, get 10, meaning items fetched STAC service:","code":"# it_obj variable from the last code example it_obj %>%    items_matched() #> [1] 1096 it_obj %>%    items_length() #> [1] 100 # fetch all items from server  # (but don't stored them back in it_obj) it_obj <- it_obj %>%    items_fetch(progress = FALSE)   it_obj %>%   items_length() #> [1] 1096"},{"path":"https://brazil-data-cube.github.io/rstac/index.html","id":"download-assets","dir":"","previous_headings":"Usage","what":"Download assets","title":"Client Library for SpatioTemporal Asset Catalog","text":"’ve got previous example metadata STAC Items, including links geospatial data called assets. download assets STAC Item Collection can use assets_download() function, returns update STAC Item Collection referring downloaded assets. code downloads thumbnail assets (.png files) 10 items stored it_obj variable.","code":"download_items <- it_obj %>%   assets_download(assets_name = \"thumbnail\", items_max = 10)"},{"path":"https://brazil-data-cube.github.io/rstac/index.html","id":"cql2-query-filter","dir":"","previous_headings":"Usage","what":"CQL2 query filter","title":"Client Library for SpatioTemporal Asset Catalog","text":"rstac also supports advanced query filter using common query language (CQL2). Users can write complex filter expressions using R code easy natural way. complete","code":"s_obj <- stac(\"https://planetarycomputer.microsoft.com/api/stac/v1\")  it_obj <- s_obj %>%    ext_filter(     collection == \"sentinel-2-l2a\" && `s2:vegetation_percentage` >= 50 &&       `eo:cloud_cover` <= 10 && `s2:mgrs_tile` == \"20LKP\" &&        anyinteracts(datetime, interval(\"2020-06-01\", \"2020-09-30\"))   ) %>%   post_request()"},{"path":"https://brazil-data-cube.github.io/rstac/index.html","id":"getting-help","dir":"","previous_headings":"","what":"Getting help","title":"Client Library for SpatioTemporal Asset Catalog","text":"can get full explanation STAC (v1.0.0) endpoint STAC API spec. detailed documentation examples use endpoint functions available rstac package can obtained typing ?rstac R console.","code":""},{"path":"https://brazil-data-cube.github.io/rstac/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Client Library for SpatioTemporal Asset Catalog","text":"cite rstac publications use: R. Simoes, F. C. de Souza, M. Zaglia, G. R. de Queiroz, R. D. C. dos Santos K. R. Ferreira, “Rstac: R Package Access Spatiotemporal Asset Catalog Satellite Imagery,” 2021 IEEE International Geoscience Remote Sensing Symposium IGARSS, 2021, pp. 7674-7677, doi: 10.1109/IGARSS47720.2021.9553518.","code":""},{"path":"https://brazil-data-cube.github.io/rstac/index.html","id":"acknowledgements-for-financial-support","dir":"","previous_headings":"","what":"Acknowledgements for financial support","title":"Client Library for SpatioTemporal Asset Catalog","text":"acknowledge thank project funders provided financial material support: Amazon Fund, established Brazilian government financial contribution Norway, project contract Brazilian Development Bank (BNDES) Foundation Science, Technology Space Applications (FUNCATE), establishment Brazil Data Cube, process 17.2.0536.1. Radiant Earth Foundation STAC Project Steering Committee advance STAC ecosystem programme. OpenGeoHub Foundation European Commission (EC) project Open-Earth-Monitor Cyberinfrastructure: Environmental information support EU’s Green Deal (1 Jun. 2022 – 31 May 2026 -","code":""},{"path":"https://brazil-data-cube.github.io/rstac/index.html","id":"how-to-contribute","dir":"","previous_headings":"","what":"How to contribute?","title":"Client Library for SpatioTemporal Asset Catalog","text":"rstac package implemented based extensible architecture, feel free contribute implementing new STAC API extensions/fragments based STAC API specifications. Make project fork. Create file inside R/ directory called ext_{extension_name}.R. code, need specify subclass name (e.g.my_subclass) extension use calling rstac_query() function. also need implement subclass following S3 generic functions: before_request(), after_response(), parse_params(). S3 generics methods can define parameters submitted HTTP request types returned documents. See implemented ext_filter API extension example. Make Pull Request recent development branch.","code":""},{"path":"https://brazil-data-cube.github.io/rstac/reference/assets_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Assets functions — assets_functions","title":"Assets functions — assets_functions","text":"functions provide support work doc_items doc_item item objects. assets_download(): Downloads assets provided STAC API. assets_url():  Returns character vector asset href. URL, can add GDAL library drivers following schemes: HTTP/HTTPS files, S3 (AWS S3) GS (Google Cloud Storage). assets_select():  Selects assets item name (asset_names parameter), expressions (... parameter), selection function (select_fn parameter). Note: function can produce items empty assets. case, users can use items_compact() function remove items assets. assets_rename():  Rename asset using named list function.","code":""},{"path":"https://brazil-data-cube.github.io/rstac/reference/assets_functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assets functions — assets_functions","text":"","code":"assets_download(   items,   asset_names = NULL,   output_dir = getwd(),   overwrite = FALSE,   ...,   use_gdal = FALSE,   download_fn = NULL )  # S3 method for class 'doc_item' assets_download(   items,   asset_names = NULL,   output_dir = getwd(),   overwrite = FALSE,   ...,   use_gdal = FALSE,   create_json = FALSE,   download_fn = NULL )  # S3 method for class 'doc_items' assets_download(   items,   asset_names = NULL,   output_dir = getwd(),   overwrite = FALSE,   ...,   use_gdal = FALSE,   download_fn = NULL,   create_json = TRUE,   items_max = Inf,   progress = TRUE )  # Default S3 method assets_download(   items,   asset_names = NULL,   output_dir = getwd(),   overwrite = FALSE,   ...,   use_gdal = FALSE,   create_json = FALSE,   download_fn = NULL )  assets_url(items, asset_names = NULL, append_gdalvsi = FALSE)  # S3 method for class 'doc_item' assets_url(items, asset_names = NULL, append_gdalvsi = FALSE)  # S3 method for class 'doc_items' assets_url(items, asset_names = NULL, append_gdalvsi = FALSE)  # Default S3 method assets_url(items, asset_names = NULL, append_gdalvsi = FALSE)  assets_select(items, ..., asset_names = NULL, select_fn = NULL)  # S3 method for class 'doc_item' assets_select(items, ..., asset_names = NULL, select_fn = NULL)  # S3 method for class 'doc_items' assets_select(items, ..., asset_names = NULL, select_fn = NULL)  # Default S3 method assets_select(items, ..., asset_names = NULL, select_fn = NULL)  assets_rename(items, mapper = NULL, ...)  # S3 method for class 'doc_item' assets_rename(items, mapper = NULL, ...)  # S3 method for class 'doc_items' assets_rename(items, mapper = NULL, ...)  # Default S3 method assets_rename(items, mapper = NULL, ...)  has_assets(items)  # S3 method for class 'doc_item' has_assets(items)  # S3 method for class 'doc_items' has_assets(items)  # Default S3 method has_assets(items)  asset_key()  asset_eo_bands(field)  asset_raster_bands(field)"},{"path":"https://brazil-data-cube.github.io/rstac/reference/assets_functions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assets functions — assets_functions","text":"items doc_item doc_items object representing result /stac/search, /collections/{collectionId}/items /collections/{collectionId}/items/{itemId} endpoints. asset_names character vector names assets selected. output_dir character directory assets saved. Default working directory (getwd()) overwrite logical TRUE replace existing file, FALSE, warning message shown. ... additional arguments. See details. use_gdal logical indicating file downloaded GDAL instead httr package. download_fn function handle download assets item downloaded. Using function, can change hrefs asset, well way download done. create_json logical indicating JSON file item metadata (doc_item doc_items) must created output directory. items_max numeric corresponding many items downloaded. progress logical indicating progress bar must shown . Defaults TRUE. append_gdalvsi logical value. true, gdal drivers included URL asset. following schemes supported: HTTP/HTTPS files, S3 (AWS S3) GS (Google Cloud Storage). select_fn function select assets item (doc_item doc_items). function receives parameter asset element , optionally, asset name. Asset elements contain metadata describing spatial-temporal objects. Users can provide function select assets based metadata returning logical value TRUE selects asset, FALSE discards . mapper either named list function rename assets item (doc_item doc_items). case named list, use <old name> = <new name> rename assets. function can used rename assets returning character string using metadata contained asset object. field character name asset field return.","code":""},{"path":"https://brazil-data-cube.github.io/rstac/reference/assets_functions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assets functions — assets_functions","text":"assets_download(): returns input object item (doc_item doc_items) href properties point download assets. assets_url(): returns character vector assets href item (doc_item doc_items). assets_select(): returns input object item (doc_item doc_items) selected assets. assets_rename(): returns input object item (doc_items doc_item) assets renamed.","code":""},{"path":"https://brazil-data-cube.github.io/rstac/reference/assets_functions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Assets functions — assets_functions","text":"Ellipsis argument (...) appears different assets functions distinct purposes: assets_download(): ellipsis used pass additional httr options GET POST methods, add_headers set_cookies. assets_select(): ellipsis used pass expressions evaluated asset metadata. Expressions must evaluated logical value TRUE selects asset FALSE discards . Multiple expressions combine operator. Expressions can use asset helper functions (.e. asset_key(), asset_eo_bands(), asset_raster_bands()). Multiple expressions combined operator. assets_select() uses non-standard evaluation evaluate expressions. means users must escape variable call able use expressions. escape done using double-curly-braces, .e., {{variable}}. WARNING: Errors evaluation expressions considered FALSE. assets_rename(): ellipsis used pass named parameters processed way named list mapper argument.","code":""},{"path":[]},{"path":"https://brazil-data-cube.github.io/rstac/reference/assets_functions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Assets functions — assets_functions","text":"","code":"if (FALSE) { # \\dontrun{  # assets_download function  stac(\"https://brazildatacube.dpi.inpe.br/stac/\") %>%    stac_search(collections = \"CB4-16D-2\",                datetime = \"2019-06-01/2019-08-01\") %>%    stac_search() %>%    get_request() %>%    assets_download(asset_names = \"thumbnail\", output_dir = tempdir()) } # }  if (FALSE) { # \\dontrun{  # assets_url function  stac_item <- stac(\"https://brazildatacube.dpi.inpe.br/stac/\") %>%   stac_search(collections = \"CB4-16D-2\", limit = 100,          datetime = \"2017-08-01/2018-03-01\",          bbox = c(-48.206,-14.195,-45.067,-12.272)) %>%   get_request() %>% items_fetch(progress = FALSE)   stac_item %>% assets_url() } # }  if (FALSE) { # \\dontrun{  # assets_select function  stac_item <- stac(\"https://brazildatacube.dpi.inpe.br/stac/\") %>%   stac_search(collections = \"CB4-16D-2\", limit = 100,          datetime = \"2017-08-01/2018-03-01\",          bbox = c(-48.206,-14.195,-45.067,-12.272)) %>%   get_request() %>% items_fetch(progress = FALSE)   stac_item %>% assets_select(asset_names = \"NDVI\") } # }  if (FALSE) { # \\dontrun{ items <- stac(\"https://planetarycomputer.microsoft.com/api/stac/v1\") %>%   stac_search(collections = c(\"landsat-8-c2-l2\", \"sentinel-2-l2a\"),               bbox = c(xmin = -64.85976089, ymin = -10.49199395,                        xmax = -64.79272527, ymax =-10.44736091),               datetime = \"2019-01-01/2019-06-28\",               limit = 50) %>%   post_request()  # Selects assets by name items <- assets_select(items,                        asset_names = c(\"B02\", \"B03\", \"SR_B1\", \"SR_B2\")) # Renames the landsat assets items <- assets_rename(items,                        SR_B1 = \"blue\",                        SR_B2 = \"green\",                        B02   = \"blue\",                        B03   = \"green\") # Get the assets url's assets_url(items) } # }"},{"path":"https://brazil-data-cube.github.io/rstac/reference/collections.html","id":null,"dir":"Reference","previous_headings":"","what":"Endpoint functions — collections","title":"Endpoint functions — collections","text":"collections function implements WFS3 /collections /collections/{collectionId} endpoints. endpoint retrieves specific STAC objects: /collections: Returns list STAC Collections published STAC service /collections/{collectionId}: Returns single STAC Collection object","code":""},{"path":"https://brazil-data-cube.github.io/rstac/reference/collections.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Endpoint functions — collections","text":"","code":"collections(q, collection_id = NULL, limit = NULL)"},{"path":"https://brazil-data-cube.github.io/rstac/reference/collections.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Endpoint functions — collections","text":"q rstac_query object expressing STAC query criteria. collection_id character collection id retrieved. limit integer defining maximum number results return. informed, defaults service implementation.","code":""},{"path":"https://brazil-data-cube.github.io/rstac/reference/collections.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Endpoint functions — collections","text":"rstac_query object subclass collections /collections/ endpoint, collection_id subclass /collections/{collection_id} endpoint, containing search field parameters provided STAC API web service.","code":""},{"path":[]},{"path":"https://brazil-data-cube.github.io/rstac/reference/collections.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Endpoint functions — collections","text":"","code":"if (FALSE) { # \\dontrun{  stac(\"https://brazildatacube.dpi.inpe.br/stac/\") %>%    collections() %>%    get_request()   stac(\"https://brazildatacube.dpi.inpe.br/stac/\") %>%    collections(collection_id = \"CB4-16D-2\") %>%    get_request() } # }"},{"path":"https://brazil-data-cube.github.io/rstac/reference/collections_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Collections functions — collections_functions","title":"Collections functions — collections_functions","text":"functions provide support work doc_collectionsobjects. collections_length():  shows many items doc_items object. collections_matched():  shows many items matched search criteria. collections_fetch():  request STAC Items pagination. collections_next():  fetches new page STAC service.","code":""},{"path":"https://brazil-data-cube.github.io/rstac/reference/collections_functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collections functions — collections_functions","text":"","code":"collections_next(collections, ...)  collections_matched(collections, matched_field)  collections_length(collections)  collections_fetch(collections, ..., progress = TRUE, matched_field = NULL)"},{"path":"https://brazil-data-cube.github.io/rstac/reference/collections_functions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collections functions — collections_functions","text":"collections doc_collections object. ... additional arguments. See details. matched_field character vector path number collections returned. progress logical indicating progress bar must shown . Defaults TRUE.","code":""},{"path":"https://brazil-data-cube.github.io/rstac/reference/collections_functions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collections functions — collections_functions","text":"collections_length(): integer value. collections_matched(): returns integer value STAC web server support extension. Otherwise returns NULL. collections_fetch(): doc_items matched items. collections_next(): fetches new page STAC service.","code":""},{"path":"https://brazil-data-cube.github.io/rstac/reference/collections_functions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Collections functions — collections_functions","text":"Ellipsis argument (...) appears different items functions distinct purposes: collections_fetch() collections_next(): ellipsis used pass additional httr options GET method, add_headers set_cookies.","code":""},{"path":"https://brazil-data-cube.github.io/rstac/reference/collections_functions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collections functions — collections_functions","text":"","code":"if (FALSE) { # \\dontrun{ # doc_items object stac(\"https://cmr.earthdata.nasa.gov/stac/LPCLOUD\") |>   collections() |>   get_request() |>   collections_fetch() } # }"},{"path":"https://brazil-data-cube.github.io/rstac/reference/conformance.html","id":null,"dir":"Reference","previous_headings":"","what":"doc_conformance endpoint — conformance","title":"doc_conformance endpoint — conformance","text":"conformance endpoint provides capabilities service. endpoint accessible provider's catalog (/conformance).","code":""},{"path":"https://brazil-data-cube.github.io/rstac/reference/conformance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"doc_conformance endpoint — conformance","text":"","code":"conformance(q)"},{"path":"https://brazil-data-cube.github.io/rstac/reference/conformance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"doc_conformance endpoint — conformance","text":"q rstac_query object expressing STAC query criteria.","code":""},{"path":"https://brazil-data-cube.github.io/rstac/reference/conformance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"doc_conformance endpoint — conformance","text":"rstac_query object subclass conformance /conformance endpoint.","code":""},{"path":[]},{"path":"https://brazil-data-cube.github.io/rstac/reference/conformance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"doc_conformance endpoint — conformance","text":"","code":"if (FALSE) { # \\dontrun{ stac(\"https://planetarycomputer.microsoft.com/api/stac/v1\") %>%   conformance() %>% get_request() } # }"},{"path":"https://brazil-data-cube.github.io/rstac/reference/cql2_helpers.html","id":null,"dir":"Reference","previous_headings":"","what":"CQL2 helper function — cql2_helpers","title":"CQL2 helper function — cql2_helpers","text":"helper functions easy construction CQL2 expressions. functions meant used expressions must escaped using {{ evaluated request.","code":""},{"path":"https://brazil-data-cube.github.io/rstac/reference/cql2_helpers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CQL2 helper function — cql2_helpers","text":"","code":"cql2_bbox_as_geojson(bbox)  cql2_date(x)  cql2_timestamp(x)  cql2_interval(start = \"..\", end = \"..\")"},{"path":"https://brazil-data-cube.github.io/rstac/reference/cql2_helpers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CQL2 helper function — cql2_helpers","text":"bbox numeric containing bbox c(xmin, ymin, xmax, ymax). x, start, end character string containing valid date timestamp.","code":""},{"path":"https://brazil-data-cube.github.io/rstac/reference/cql2_helpers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"CQL2 helper function — cql2_helpers","text":"cql2_bbox_as_geojson(): GeoJSON object. cql2_date(), cql2_timestamp(), cql2_interval(): internal rstac expressions representing temporal values.","code":""},{"path":"https://brazil-data-cube.github.io/rstac/reference/cql2_helpers.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"CQL2 helper function — cql2_helpers","text":"cql2_bbox_as_geojson(): used convert bounding box (bbox) GeoJSON object used argument CQL2 spatial operators. cql2_date(), cql2_timestamp(), cql2_interval(): create temporal literal values passed CQL2 expressions.","code":""},{"path":"https://brazil-data-cube.github.io/rstac/reference/cql2_helpers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"CQL2 helper function — cql2_helpers","text":"","code":"if (FALSE) { # \\dontrun{ bbox <- c(-122.2751, 47.5469, -121.9613, 47.7458)  cql2_json(     collection == \"landsat-c2-l2\" &&       t_intersects(datetime, {{         cql2_interval(\"2020-12-01\", \"2020-12-31\")       }}) &&       s_intersects(geometry, {{         cql2_bbox_as_geojson(bbox)       }})   ) } # }"},{"path":"https://brazil-data-cube.github.io/rstac/reference/ext_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Filter extension — ext_filter","title":"Filter extension — ext_filter","text":"ext_filter() implements Common Query Language (CQL2) filter extension rstac. extension expands filter capabilities providing query language construct complex expressions. CQL2 OGC standard defines filters can constructed. supports predicates standard data types like strings, numbers, boolean well spatial geometries (point, lines, polygons) temporal data (instants intervals). cql2_json() cql2_text() helper functions can used show expressions converted CQL2 standard, either JSON TEXT formats. rstac translates R expressions CQL2, allowing users express filter criteria using R language. details create CQL2 expressions rstac. See details section.","code":""},{"path":"https://brazil-data-cube.github.io/rstac/reference/ext_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Filter extension — ext_filter","text":"","code":"ext_filter(q, expr, lang = NULL, crs = NULL)  cql2_json(expr)  cql2_text(expr)"},{"path":"https://brazil-data-cube.github.io/rstac/reference/ext_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Filter extension — ext_filter","text":"q rstac_query object expressing STAC query criteria. expr valid R expression translated CQL2 (see details). lang character value indicating CQL2 representation used. can either \"cql2-text\" (plain text) \"cql2-json\" (JSON format). NULL (default), \"cql2-text\" used HTTP GET requests \"cql2-json\" POST requests. crs optional character value informing coordinate reference system used geometry objects. NULL (default), STAC services assume \"WGS 84\".","code":""},{"path":"https://brazil-data-cube.github.io/rstac/reference/ext_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Filter extension — ext_filter","text":"rstac_query object  subclass ext_filter containing request parameters passed get_request() post_request() function.","code":""},{"path":"https://brazil-data-cube.github.io/rstac/reference/ext_filter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Filter extension — ext_filter","text":"allow users express filter criteria R language, rstac takes advantage abstract syntax tree (AST) translate R expressions CQL2 expressions. following topics describe correspondences rstac expressions CQL2 operators.","code":""},{"path":"https://brazil-data-cube.github.io/rstac/reference/ext_filter.html","id":"non-standard-evaluation","dir":"Reference","previous_headings":"","what":"Non-standard evaluation","title":"Filter extension — ext_filter","text":"ext_filter() uses non-standard evaluation evaluate expressions. means users must escape variable call able use expressions. escape done using double-curly-braces, .e., {{variable}}.","code":""},{"path":"https://brazil-data-cube.github.io/rstac/reference/ext_filter.html","id":"standard-comparison-operators","dir":"Reference","previous_headings":"","what":"Standard comparison operators","title":"Filter extension — ext_filter","text":"==, >=, <=, >, <, != operators correspond =, >=, <=, >, <, <> CQL2, respectively. function is_null() !is_null() corresponds NULL NULL CQL2 operators, respectively.","code":""},{"path":"https://brazil-data-cube.github.io/rstac/reference/ext_filter.html","id":"advanced-comparison-operators","dir":"Reference","previous_headings":"","what":"Advanced comparison operators","title":"Filter extension — ext_filter","text":"%like% b corresponds CQL2 LIKE b, b strings values. (, b, c) corresponds CQL2 b c, b c integer values. %% b corresponds CQL2 (b), b list values type .","code":""},{"path":"https://brazil-data-cube.github.io/rstac/reference/ext_filter.html","id":"spatial-operators","dir":"Reference","previous_headings":"","what":"Spatial operators","title":"Filter extension — ext_filter","text":"functions s_intersects(, b), s_touches(, b), s_within(, b), s_overlaps(, b), s_crosses(, b), s_contains(, b) corresponds CQL2 S_INTERSECTS(, b), S_TOUCHES(, b), S_WITHIN(, b), S_OVERLAPS(, b), S_CROSSES(, b), S_CONTAINS(, b) operators, respectively. , b geometry objects. rstac accepts sf, sfc, sfg, list (representing GeoJSON objects), character (representing either GeoJSON WKT). NOTE: spatial object types, except character, representing WKT, may lose precision due numeric truncation R converts numbers JSON text. WKT strings sent \"\" service. Therefore, way users retain precision spatial objects represent WKT string. However, user can control numeric precision using options(stac_digits = ...). default value 15 digits.","code":""},{"path":"https://brazil-data-cube.github.io/rstac/reference/ext_filter.html","id":"temporal-operators","dir":"Reference","previous_headings":"","what":"Temporal operators","title":"Filter extension — ext_filter","text":"functions date(), timestamp(), interval(, b) corresponds CQL2 DATE(), TIMESTAMP(), INTERVAL(, b) operators, respectively. functions create literal temporal values. first two define instant type, third interval type. functions t_after(, b), t_before(, b), t_contains(, b), t_disjoint(, b), t_during(, b), t_equals(, b), t_finishedby(, b), t_finishes(, b), t_intersects(, b), t_meets(, b), t_meet(, b), t_metby(, b), t_overlappedby(, b), t_overlaps(, b), t_startedby(, b), t_starts(, b) corresponds CQL2 T_AFTER(, b), T_BEFORE(, b), T_CONTAINS(, b), T_DISJOINT(, b), T_DURING(, b), T_EQUALS(, b), T_FINISHEDBY(, b), T_FINISHES(, b), T_INTERSECTS(, b), T_MEETS(, b), T_MEET(, b), T_METBY(, b), T_OVERLAPPEDBY(, b), T_OVERLAPS(, b), T_STARTEDBY(, b), T_STARTS(, b) operators, respectively. , b temporal values (instant interval, depending function).","code":""},{"path":"https://brazil-data-cube.github.io/rstac/reference/ext_filter.html","id":"array-operators","dir":"Reference","previous_headings":"","what":"Array Operators","title":"Filter extension — ext_filter","text":"R unnamed lists (vectors size > 1) translated arrays rstac. list() c() functions always create array values CQL2 context, matter number arguments. functions a_equals(, b), a_contains(, b), a_containedby(, b), a_overlaps(, b) corresponds CQL2 A_EQUALS(, b), A_CONTAINS(, b), A_CONTAINEDBY(, b), A_OVERLAPS(, b) operators, respectively. , b arrays.","code":""},{"path":"https://brazil-data-cube.github.io/rstac/reference/ext_filter.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Filter extension — ext_filter","text":"specification states double-quoted identifiers interpreted properties. However, R language distinguish double quote single quote strings. right way represent double quoted properties R use escape character (), example \"date\"`.","code":""},{"path":[]},{"path":"https://brazil-data-cube.github.io/rstac/reference/ext_filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Filter extension — ext_filter","text":"","code":"if (FALSE) { # \\dontrun{ # Standard comparison operators in rstac: # Creating a stac search query req <- stac(\"https://planetarycomputer.microsoft.com/api/stac/v1\") %>%   stac_search(limit = 5)  # Equal operator '=' with collection property req %>% ext_filter(collection == \"sentinel-2-l2a\") %>% post_request()  # Not equal operator '!=' with collection property req %>% ext_filter(collection != \"sentinel-2-l2a\") %>% post_request()  # Less than or equal operator '<=' with datetime property req %>% ext_filter(datetime <= \"1986-01-01\") %>% post_request()  # Greater than or equal '>=' with AND operator req %>% ext_filter(collection == \"sentinel-2-l2a\"   &&                    `s2:vegetation_percentage` >= 50 &&                    `eo:cloud_cover` <= 10) %>% post_request() # Advanced comparison operators # 'LIKE' operator req %>% ext_filter(collection %like% \"modis%\") %>% post_request()  # 'IN' operator req %>% ext_filter(   collection %in% c(\"landsat-c2-l2\", \"sentinel-2-l2a\") &&     datetime > \"2019-01-01\" &&     datetime < \"2019-06-01\") %>%   post_request()  # Spatial operator # Lets create a polygon with list polygon <- list(   type = \"Polygon\",   coordinates = list(     matrix(c(-62.34499836, -8.57414572,              -62.18858174, -8.57414572,              -62.18858174, -8.15351185,              -62.34499836, -8.15351185,              -62.34499836, -8.57414572),            ncol = 2, byrow = TRUE)   ) ) # 'S_INTERSECTS' spatial operator with polygon and geometry property req %>% ext_filter(collection == \"sentinel-2-l2a\" &&                    s_intersects(geometry, {{polygon}})) %>% post_request()  # 'S_CONTAINS' spatial operator with point and geometry property point <- list(type = \"Point\", coordinates = c(-62.45792211, -8.61158488)) req %>% ext_filter(collection == \"landsat-c2-l2\" &&                    s_contains(geometry, {{point}})) %>% post_request()  # 'S_CROSSES' spatial operator with linestring and geometry property linestring <- list(   type = \"LineString\",   coordinates = matrix(          c(-62.55735320, -8.43329465, -62.21791603, -8.36815014),          ncol = 2, byrow = TRUE   ) ) req %>% ext_filter(collection == \"landsat-c2-l2\" &&                    s_crosses(geometry, {{linestring}})) %>% post_request()  # Temporal operator # 'T_INTERSECTS' temporal operator with datetime property req %>% ext_filter(   collection == \"landsat-c2-l2\" &&     t_intersects(datetime, interval(\"1985-07-16T05:32:00Z\",                                     \"1985-07-24T16:50:35Z\"))) %>%  post_request()  # 'T_DURING' temporal operator with datetime property req %>%  ext_filter(collection == \"landsat-c2-l2\" &&             t_during(datetime,             interval(\"2022-07-16T05:32:00Z\", \"..\"))) %>%  post_request()  # 'T_BEFORE' temporal operator with datetime property req %>%  ext_filter(collection == \"landsat-c2-l2\" &&             t_before(datetime, timestamp(\"2022-07-16T05:32:00Z\"))) %>%  post_request()  # 'T_AFTER' temporal operator with datetime property req %>%  ext_filter(collection == \"landsat-c2-l2\" &&             t_after(datetime, timestamp(\"2022-07-16T05:32:00Z\"))) %>%   post_request()  # Shows how CQL2 expression (TEXT format) cql2_text(collection == \"landsat-c2-l2\" &&   s_crosses(geometry, {{linestring}}))  # Shows how CQL2 expression (JSON format) cql2_json(collection == \"landsat-c2-l2\" &&             t_after(datetime, timestamp(\"2022-07-16T05:32:00Z\"))) } # }"},{"path":"https://brazil-data-cube.github.io/rstac/reference/ext_query.html","id":null,"dir":"Reference","previous_headings":"","what":"Query extension — ext_query","title":"Query extension — ext_query","text":"ext_query() exported function STAC API query extension. can used call stac_search() function. allows additional fields operators defined stac_search() function used make complex filter. function accepts multiple filter criteria. filter entry expression formed <field> <operator> <value>, <field> refers valid item property. Supported <fields> depends STAC API service implementation. users must rely service providers' documentation know properties can used extension. ext_query() function allows following <operators> == corresponds 'eq' != corresponds 'neq' < corresponds 'lt' <= corresponds 'lte' > corresponds 'gt' >= corresponds 'gte' \\%startsWith\\% corresponds 'startsWith' implements string prefix search operator. \\%endsWith\\% corresponds 'endsWith' implements string suffix search operator. \\%contains\\%: corresponds 'contains' implements string infix search operator. \\%\\%: corresponds '' implements vector search operator. Besides function, following S3 generic methods implemented get things done extension: before_request() subclass ext_query after_response() subclass ext_query See source file ext_query.R example implement new extensions.","code":""},{"path":"https://brazil-data-cube.github.io/rstac/reference/ext_query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query extension — ext_query","text":"","code":"ext_query(q, ...)"},{"path":"https://brazil-data-cube.github.io/rstac/reference/ext_query.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query extension — ext_query","text":"q rstac_query object expressing STAC query criteria. ... entries format <field> <operator> <value>.","code":""},{"path":"https://brazil-data-cube.github.io/rstac/reference/ext_query.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query extension — ext_query","text":"rstac_query object  subclass ext_query containing request parameters passed post_request() function.","code":""},{"path":[]},{"path":"https://brazil-data-cube.github.io/rstac/reference/ext_query.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query extension — ext_query","text":"","code":"if (FALSE) { # \\dontrun{  stac(\"https://brazildatacube.dpi.inpe.br/stac/\") %>%    stac_search(collections = \"CB4-16D-2\") %>%    ext_query(\"bdc:tile\" %in% \"007004\") %>%    post_request() } # }"},{"path":"https://brazil-data-cube.github.io/rstac/reference/extensions.html","id":null,"dir":"Reference","previous_headings":"","what":"Extension development functions — extensions","title":"Extension development functions — extensions","text":"Currently, five STAC documents defined STAC spec: doc_catalog doc_collection doc_collections doc_item doc_items document class associated STAC API endpoints. soon new STAC documents proposed specification, new classes can created rstac package. Let version parameter NULL detect version automatically. Basically, two types extensions STAC specification: STAC documents extensions: extensions can defined different elements document specification. STAC API extensions: extensions associated interaction client server API may add new elements STAC documents just filter elements returned documents. , focus second type extension. let rstac package perform behavior according STAC API extension need define functions. functions can implemented three environments: rstac package including new functions make GitHub pull request rstac repository (https://github.com/brazil-data-cube/rstac) new package using rstac dependent package script loads rstac environment places may impose specific requirements, however core logic implement extension . functions intended want implement new STAC API extensions. extension must define subclass name implement following S3 generic methods subclass: before_request(): allows handling query parameters submit HTTP server, usually sets query endpoint; after_request(): allows check parse document received HTTP server; methods work 'behind scenes' rstac_query object representing user query passed request function (e.g. get_request() post_request()). calling order : begin get_request() post_request() STAC API version defined, try detect call before_request() send HTTP request receive HTTP response after_response() end get_request() post_request() Besides , extension must expose function receive user parameters return rstac_query object subclass associated S3 methods. function must accept first parameter rstac_query object representing actual query. keep command flow consistency, function needs check subclass input query. , must set new changes input query parameters according user input , finally, return new query rstac_query object. can see examples implement STAC API extension looking stac.R, collections.R, items.R, stac_search.R, ext_query.R source files. files implement core STAC API endpoints, well query API extension. also utility functions described Functions section bellow can help extension development.","code":""},{"path":"https://brazil-data-cube.github.io/rstac/reference/extensions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extension development functions — extensions","text":"","code":"before_request(q)  after_response(q, res)  parse_params(q, params)  content_response(res, status_codes, content_types, key_message)  check_query_verb(q, verbs, msg = NULL)  check_query(x, classes = NULL)  subclass(x)  set_query_endpoint(q, endpoint, params = NULL)  rstac_query(version = NULL, base_url, params = list(), subclass)"},{"path":"https://brazil-data-cube.github.io/rstac/reference/extensions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extension development functions — extensions","text":"q rstac_query object. res httr response object. params named list URL query parameters appended URL. status_codes character vector successful status codes. content_types character vector acceptable responses' content type. key_message character vector JSON keys show requested API message. verbs character vector allowed HTTP request methods msg character personalized error message x rstac_query object expressing STAC query criteria. classes character vector allowed S3 sub-classes endpoint character vector format string endpoint url. version character STAC version. base_url character informing base URL STAC web service. subclass character corresponding subclass object created.","code":""},{"path":"https://brazil-data-cube.github.io/rstac/reference/extensions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extension development functions — extensions","text":"rstac_query object before_request() after_response() functions. content_response() function returns list data structure representing JSON file received HTTP response rstac_query() function returns STACQuery object subclass defined subclass parameter.","code":""},{"path":"https://brazil-data-cube.github.io/rstac/reference/extensions.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Extension development functions — extensions","text":"content_response(): content_response function checks request's response accordance allowed status codes content-types. returns parsed content response. check_query_verb(): check_query_verb() function allows define HTTP verbs allowed. useful establishing verbs supported extension. check_query(): check_query() function specifies type query object (rstac_query) expected function extension. subclass(): subclass() function returns character representing subclass name rstac_query objects. set_query_endpoint(): set_query_endpoint() function defines endpoint query. params parameter passed, value must entry params field given query. corresponding param value used value replacement %s occurrences endpoint string. replacement, params list removed. rstac_query(): rstac_query() function constructor rstac_query objects. Every extension must implement subclass rstac_query represent queries. done informing subclass parameter extension's subclass name. params parameter named list user parameters must stored. important know previous query parameters needs keeped new query. , recommended use utils::modifyList() function merge old new query parameters. version parameter NULL, rstac detect STAC API version automatically. general, implementing new subclass, parameters version url previous query. params parameter merged previous query. subclass extension's subclass name.","code":""},{"path":[]},{"path":"https://brazil-data-cube.github.io/rstac/reference/items.html","id":null,"dir":"Reference","previous_headings":"","what":"Endpoint functions — items","title":"Endpoint functions — items","text":"items function implements WFS3 /collections/{collectionId}/items, /collections/{collectionId}/items/{featureId} endpoints. endpoint retrieves specific STAC objects: /collections/{collectionId}/items: Returns STAC Items collection (GeoJSON) /collections/{collectionId}/items/{itemId}: Returns STAC Item (GeoJSON Feature) endpoint /collections/{collectionId}/items accepts filters parameters stac_search() function.","code":""},{"path":"https://brazil-data-cube.github.io/rstac/reference/items.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Endpoint functions — items","text":"","code":"items(q, feature_id = NULL, datetime = NULL, bbox = NULL, limit = NULL)"},{"path":"https://brazil-data-cube.github.io/rstac/reference/items.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Endpoint functions — items","text":"q rstac_query object expressing STAC query criteria. feature_id character item id fetched. works collection_id informed. equivalent endpoint /collections/{collectionId}/items/{featureId}. datetime character date-time interval. Date time strings needs conform RFC 3339. Intervals expressed separating two date-time strings '/' character. Open intervals expressed using '..' place date-time. Examples: date-time: \"2018-02-12T23:20:50Z\" closed interval: \"2018-02-12T00:00:00Z/2018-03-18T12:31:12Z\" Open intervals: \"2018-02-12T00:00:00Z/..\" \"../2018-03-18T12:31:12Z\" features datetime property intersects interval date-time informed datetime selected. bbox numeric vector features geometry intersects bounding box selected. bounding box provided four six numbers, depending whether coordinate reference system includes vertical axis (elevation depth): Lower left corner, coordinate axis 1 Lower left corner, coordinate axis 2 Lower left corner, coordinate axis 3 (optional) Upper right corner, coordinate axis 1 Upper right corner, coordinate axis 2 Upper right corner, coordinate axis 3 (optional) coordinate reference system values WGS84 longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84). values , cases, sequence minimum longitude, minimum latitude, maximum longitude, maximum latitude. However, cases box spans antimeridian, first value (west-box edge) larger third value (east-box edge). limit integer defining maximum number results return. informed, defaults service implementation.","code":""},{"path":"https://brazil-data-cube.github.io/rstac/reference/items.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Endpoint functions — items","text":"rstac_query object subclass items /collections/{collection_id}/items endpoint, item_id subclass /collections/{collection_id}/items/{feature_id} endpoint, containing search field parameters provided STAC API web service.","code":""},{"path":[]},{"path":"https://brazil-data-cube.github.io/rstac/reference/items.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Endpoint functions — items","text":"","code":"if (FALSE) { # \\dontrun{  stac(\"https://brazildatacube.dpi.inpe.br/stac/\") %>%    collections(\"CB4-16D-2\") %>%    items(bbox = c(-47.02148, -17.35063, -42.53906, -12.98314)) %>%    get_request()   stac(\"https://brazildatacube.dpi.inpe.br/stac/\") %>%    collections(\"CB4-16D-2\") %>%    items(\"CB4-16D_V2_000002_20230509\") %>%    get_request() } # }"},{"path":"https://brazil-data-cube.github.io/rstac/reference/items_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Items functions — items_functions","title":"Items functions — items_functions","text":"functions provide support work doc_items doc_item objects. items_length(): shows many items doc_items object. items_matched(): shows many items matched search criteria. supports search:metadata (v0.8.0), context (v0.9.0), numberMatched (OGC WFS3 core spec). items_fetch(): request STAC Items pagination. items_next(): fetches new page STAC service. items_datetime(): retrieves datetime field properties doc_items doc_item objects. items_bbox(): retrieves bbox field doc_items doc_item object. item_assets(): returns assets name doc_items doc_item objects. items_filter(): selects items match criteria (see details section). items_reap(): traverses items doc_items object extracts values based specified field path. useful retrieving nested elements STAC items. items_fields(): lists field names inside item. items_sign(): allow access assets preparing url. items_as_sf():  convert items sf object. items_as_sfc():  convert items sfc object. items_intersects():  indicates items intersects given geometry. items_properties(): lists properties names inside item.","code":""},{"path":"https://brazil-data-cube.github.io/rstac/reference/items_functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Items functions — items_functions","text":"","code":"items_length(items)  # S3 method for class 'doc_items' items_length(items)  items_matched(items, matched_field = NULL)  # S3 method for class 'doc_items' items_matched(items, matched_field = NULL)  items_fetch(items, ...)  # S3 method for class 'doc_items' items_fetch(items, ..., progress = TRUE, matched_field = NULL)  items_next(items, ...)  # S3 method for class 'doc_items' items_next(items, ...)  items_datetime(items)  # S3 method for class 'doc_item' items_datetime(items)  # S3 method for class 'doc_items' items_datetime(items)  items_bbox(items)  # S3 method for class 'doc_item' items_bbox(items)  # S3 method for class 'doc_items' items_bbox(items)  items_assets(items)  # S3 method for class 'doc_item' items_assets(items)  # S3 method for class 'doc_items' items_assets(items)  # Default S3 method items_assets(items)  items_filter(items, ..., filter_fn = NULL)  # S3 method for class 'doc_items' items_filter(items, ..., filter_fn = NULL)  items_compact(items)  # S3 method for class 'doc_items' items_compact(items)  items_reap(items, field, pick_fn = identity)  # S3 method for class 'doc_item' items_reap(items, field, pick_fn = identity)  # S3 method for class 'doc_items' items_reap(items, field, pick_fn = identity)  # Default S3 method items_reap(items, field, pick_fn = identity)  items_fields(items, field = NULL)  # S3 method for class 'doc_item' items_fields(items, field = NULL)  # S3 method for class 'doc_items' items_fields(items, field = NULL)  items_sign(items, sign_fn)  # S3 method for class 'doc_item' items_sign(items, sign_fn)  # S3 method for class 'doc_items' items_sign(items, sign_fn)  # Default S3 method items_sign(items, sign_fn)  items_as_sf(items, ..., crs = 4326)  # S3 method for class 'doc_item' items_as_sf(items, ..., crs = 4326)  # S3 method for class 'doc_items' items_as_sf(items, ..., crs = 4326)  items_as_sfc(items, crs = 4326)  # S3 method for class 'doc_item' items_as_sfc(items, crs = 4326)  # S3 method for class 'doc_items' items_as_sfc(items, crs = 4326)  items_as_tibble(items)  # S3 method for class 'doc_item' items_as_tibble(items)  # S3 method for class 'doc_items' items_as_tibble(items)  items_intersects(items, geom, ..., crs = 4326)  # S3 method for class 'doc_item' items_intersects(items, geom, ..., crs = 4326)  # S3 method for class 'doc_items' items_intersects(items, geom, ..., crs = 4326)  items_properties(items)  # S3 method for class 'doc_item' items_properties(items)  # S3 method for class 'doc_items' items_properties(items)  items_select(items, selection)  # S3 method for class 'doc_items' items_select(items, selection)"},{"path":"https://brazil-data-cube.github.io/rstac/reference/items_functions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Items functions — items_functions","text":"items doc_items object. matched_field character vector path number items returned named list located starting initial node list. example, information position items$meta$found object, must passed following parameter c(\"meta\", \"found\"). ... additional arguments. See details. progress logical indicating progress bar must shown . Defaults TRUE. filter_fn function receives item evaluate logical value. field character vector specifying path field extract subfield values. example, c(\"assets\", \"*\") traverse assets item. pick_fn function used pick elements items addressed field parameter. sign_fn function receives item parameter returns item signed. crs character representing geometry projection. geom sf sfc object. selection integer vector containing indices items select.","code":""},{"path":"https://brazil-data-cube.github.io/rstac/reference/items_functions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Items functions — items_functions","text":"items_length(): integer value. items_matched(): returns integer value STAC web server support extension. Otherwise returns NULL. items_fetch(): doc_items matched items. items_next(): fetches new page STAC service. items_datetime(): list items' datetime. items_bbox(): returns list items' bounding boxes. item_assets(): returns character value assets names items. items_filter(): doc_items object. items_reap(): vector supplied field atomic, otherwise list. items_fields(): character vector. items_sign(): doc_items object signed assets url. items_as_sf(): sf object. items_as_sfc(): sfc object. items_as_tibble(): tibble object. items_intersects(): logical vector. items_properties(): returns character value properties items. items_select(): select features items object.","code":""},{"path":"https://brazil-data-cube.github.io/rstac/reference/items_functions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Items functions — items_functions","text":"Ellipsis argument (...) appears different items functions distinct purposes: items_matched() items_assets(): ellipsis used. items_fetch() items_next(): ellipsis used pass additional httr options GET POST methods, add_headers set_cookies. items_filter(): ellipsis used pass logical expressions evaluated doc_item field filter criteria. Expressions must evaluated logical value TRUE selects item FALSE discards . Multiple expressions combine operator. items_filter() uses non-standard evaluation evaluate expressions. means users must escape variable call able use expressions. escape done using double-curly-braces, .e., {{variable}}. WARNING: evaluation filter expressions changed rstac 0.9.2. Older versions rstac used properties field evaluate filter expressions. , example write expressions new rstac version:   items_sign(): near future, ellipsis used append key-value pairs url query string asset. items_sign() sign_fn parameter must function receives argument item returns signed item. rstac provides sign_bdc() sign_planetary_computer() functions access Brazil Data Cube products Microsoft Planetary Computer catalogs, respectively.","code":"# expression in older version items_filter(stac_obj, `eo:cloud_cover` < 10) # now expressions must refer to properties explicitly items_filter(stac_obj, properties$`eo:cloud_cover` < 10) items_filter(stac_obj, properties[[\"eo:cloud_cover\"]] < 10)"},{"path":"https://brazil-data-cube.github.io/rstac/reference/items_functions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Items functions — items_functions","text":"","code":"if (FALSE) { # \\dontrun{  x <- stac(\"https://brazildatacube.dpi.inpe.br/stac\") %>%      stac_search(collections = \"CB4-16D-2\") %>%      stac_search(datetime = \"2020-01-01/2021-01-01\", limit = 500) %>%      get_request()   x %>% items_length()  x %>% items_matched()  x %>% items_datetime()  x %>% items_bbox()  x %>% items_fetch() } # }  if (FALSE) { # \\dontrun{ # Defining BDC token Sys.setenv(\"BDC_ACCESS_KEY\" = \"token-123\")  # doc_item object stac(\"https://brazildatacube.dpi.inpe.br/stac/\") %>%     stac_search(collections = \"CB4-16D-2\", limit = 100,         datetime = \"2017-08-01/2018-03-01\",         bbox = c(-48.206, -14.195, -45.067, -12.272)) %>%     get_request() %>% items_sign(sign_fn = sign_bdc())  } # }  if (FALSE) { # \\dontrun{ # doc_items object stac(\"https://brazildatacube.dpi.inpe.br/stac/\") %>%     stac_search(collections = \"CB4-16D-2\", limit = 100,         datetime = \"2017-08-01/2018-03-01\",         bbox = c(-48.206, -14.195, -45.067, -12.272)) %>%     get_request() %>%     items_filter(properties$`eo:cloud_cover` < 10)  # Example with AWS STAC stac(\"https://earth-search.aws.element84.com/v0\") %>%   stac_search(collections = \"sentinel-s2-l2a-cogs\",               bbox = c(-48.206, -14.195, -45.067, -12.272),               datetime = \"2018-06-01/2018-06-30\",               limit = 500) %>%   post_request() %>%   items_filter(filter_fn = function(x) {x$properties$`eo:cloud_cover` < 10}) } # }  if (FALSE) { # \\dontrun{ # doc_items object stac_item <- stac(\"https://brazildatacube.dpi.inpe.br/stac/\") %>%  stac_search(collections = \"CB4-16D-2\", limit = 100,         datetime = \"2017-08-01/2018-03-01\",         bbox = c(-48.206, -14.195, -45.067, -12.272)) %>%  get_request() %>%  items_fetch(progress = FALSE)  stac_item %>% items_reap(c(\"properties\", \"datetime\"))  # Extract all asset URLs from each item stac_item %>% items_reap(c(\"assets\", \"*\"), \\(x) x$href)  stac_item %>% items_as_sf()  stac_item %>% items_as_tibble()  stac_item %>% items_select(c(1, 4, 10, 20))  } # }"},{"path":"https://brazil-data-cube.github.io/rstac/reference/items_sign_bdc.html","id":null,"dir":"Reference","previous_headings":"","what":"Signature in hrefs provided by the STAC from the Brazil Data Cube project. — items_sign_bdc","title":"Signature in hrefs provided by the STAC from the Brazil Data Cube project. — items_sign_bdc","text":"functions provide support access assets Brazil Data Cube. items_sign_bdc():  simplified function sign assets' URL Brazil Data Cube able access data. sign_bdc(): Creates signing function used items_sign(). function sign assets' URL. sign hrefs token need store environment variable BDC_ACCESS_KEYor use acess_token parameter.","code":""},{"path":"https://brazil-data-cube.github.io/rstac/reference/items_sign_bdc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Signature in hrefs provided by the STAC from the Brazil Data Cube project. — items_sign_bdc","text":"","code":"items_sign_bdc(items, access_token = NULL, ...)  sign_bdc(access_token = NULL, ...)"},{"path":"https://brazil-data-cube.github.io/rstac/reference/items_sign_bdc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Signature in hrefs provided by the STAC from the Brazil Data Cube project. — items_sign_bdc","text":"items doc_item doc_items object representing result /stac/search, /collections/{collectionId}/items /collections/{collectionId}/items/{itemId} endpoints. access_token character access token parameter access Brazil Data Cube assets. ... additional parameters can supplied GET function httr package.","code":""},{"path":"https://brazil-data-cube.github.io/rstac/reference/items_sign_bdc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Signature in hrefs provided by the STAC from the Brazil Data Cube project. — items_sign_bdc","text":"function signs item assets. items_sign_bdc(): items signed assets URLs. sign_bdc(): function passed items_sign().","code":""},{"path":"https://brazil-data-cube.github.io/rstac/reference/items_sign_bdc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Signature in hrefs provided by the STAC from the Brazil Data Cube project. — items_sign_bdc","text":"","code":"if (FALSE) { # \\dontrun{  # doc_items object  stac_obj <- stac(\"https://brazildatacube.dpi.inpe.br/stac/\") %>%    stac_search(collections = \"CB4-16D-2\",                datetime = \"2019-06-01/2019-08-01\") %>%    stac_search() %>%    get_request()   # the new way to authenticate:  stac_obj <- stac_obj %>%    items_sign_bdc(\"<your-access-token>\")   # this is the old way of authentication (still works):  # stac_obj %>%  #   items_sign(sign_fn = sign_bdc(access_token = \"<your-access-token>\")) } # }"},{"path":"https://brazil-data-cube.github.io/rstac/reference/items_sign_planetary_computer.html","id":null,"dir":"Reference","previous_headings":"","what":"Signs URL to access assets from Microsoft's Planetary Computer. — items_sign_planetary_computer","title":"Signs URL to access assets from Microsoft's Planetary Computer. — items_sign_planetary_computer","text":"functions provide support access assets Planetary Computer. items_sign_planetary_computer():  simplified function sign assets' URL Microsoft Planetary Computer able access data. sign_planetary_computer(): Creates signing function used items_sign(). function sign assets' URL.","code":""},{"path":"https://brazil-data-cube.github.io/rstac/reference/items_sign_planetary_computer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Signs URL to access assets from Microsoft's Planetary Computer. — items_sign_planetary_computer","text":"","code":"items_sign_planetary_computer(items, subscription_key = NULL, ...)  sign_planetary_computer(..., headers = NULL, token_url = NULL)"},{"path":"https://brazil-data-cube.github.io/rstac/reference/items_sign_planetary_computer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Signs URL to access assets from Microsoft's Planetary Computer. — items_sign_planetary_computer","text":"items doc_item doc_items object representing result /stac/search, /collections/{collectionId}/items /collections/{collectionId}/items/{itemId} endpoints. subscription_key subscription-key access restricted assets Microsoft Planetary Computer. can keep parameter empty non-protected assets. ... additional parameters can supplied GET function httr package. headers named character vector headers key-value content. token_url character URL generates tokens Microsoft service. default used: \"https://planetarycomputer.microsoft.com/api/sas/v1/token\"","code":""},{"path":"https://brazil-data-cube.github.io/rstac/reference/items_sign_planetary_computer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Signs URL to access assets from Microsoft's Planetary Computer. — items_sign_planetary_computer","text":"items_sign_planetary_computer(): items signed assets URLs. sign_planetary_computer(): function passed items_sign().","code":""},{"path":"https://brazil-data-cube.github.io/rstac/reference/items_sign_planetary_computer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Signs URL to access assets from Microsoft's Planetary Computer. — items_sign_planetary_computer","text":"","code":"if (FALSE) { # \\dontrun{  # doc_items object  stac_obj <- stac(\"https://planetarycomputer.microsoft.com/api/stac/v1/\") %>%   stac_search(collections = \"sentinel-2-l2a\",               bbox = c(-47.02148, -17.35063, -42.53906, -12.98314)) %>%   get_request()   # the new way to authenticate:  stac_obj <- stac_obj %>%    items_sign_planetary_computer()   # this is the old way of authentication (still works):  # stac_obj <- stac_obj %>%  #   items_sign(sign_fn = sign_planetary_computer())   # example of access to collections that require authentication  stac_obj <- stac(\"https://planetarycomputer.microsoft.com/api/stac/v1\") %>%    stac_search(collections = c(\"sentinel-1-rtc\"),                bbox = c(-64.8597, -10.4919, -64.79272527, -10.4473),                datetime = \"2019-01-01/2019-01-28\") %>%    post_request()   # the new way to authenticate:  # stac_obj <- stac_obj %>%  #   items_sign_planetary_computer(\"<subscription-key>\")   # this is the old way of authentication (still works):  # stac_obj <- stac_obj %>%  #   items_sign(  #     sign_fn = sign_planetary_computer(  #       headers = c(\"Ocp-Apim-Subscription-Key\" = <your-mpc-token>)  #     )  #   ) } # }"},{"path":"https://brazil-data-cube.github.io/rstac/reference/preview_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot preview images — preview_plot","title":"Plot preview images — preview_plot","text":"helper function plot preview assets (e.g. quicklook, thumbnail, rendered_preview). Currently, png jpeg formats supported.","code":""},{"path":"https://brazil-data-cube.github.io/rstac/reference/preview_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot preview images — preview_plot","text":"","code":"preview_plot(url)"},{"path":"https://brazil-data-cube.github.io/rstac/reference/preview_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot preview images — preview_plot","text":"url image URL plotted.","code":""},{"path":"https://brazil-data-cube.github.io/rstac/reference/preview_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot preview images — preview_plot","text":"rastergrob grob package grid.","code":""},{"path":"https://brazil-data-cube.github.io/rstac/reference/print.html","id":null,"dir":"Reference","previous_headings":"","what":"Printing functions — print","title":"Printing functions — print","text":"print function covers objects rstac package: stac(): returns doc_catalog document /stac (v0.8.0) / (v0.9.0 v1.0.0) endpoint. stac_search(): returns doc_items document /stac/search (v0.8.0) /search (v0.9.0 v1.0.0) endpoint containing Items match provided search predicates. collections(): implements /collections /collections/{collectionId} endpoints. former returns doc_collections document lists collections published server, later returns single doc_collection document describes unique collection. items(): retrieves doc_items document /collections/{collectionId}/items endpoint doc_item document /collections/{collectionId}/items/{itemId} endpoints. rstac package objects visualization based markdown, lightweight markup language. can paste output markdown editor better visualization. Call print() function print rstac's objects. can determine many items printed using n parameter.","code":""},{"path":"https://brazil-data-cube.github.io/rstac/reference/print.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Printing functions — print","text":"","code":"# S3 method for class 'rstac_query' print(x, ...)  # S3 method for class 'doc_catalog' print(x, ...)  # S3 method for class 'doc_collections' print(x, n = 10, ...)  # S3 method for class 'doc_collection' print(x, ...)  # S3 method for class 'doc_items' print(x, n = 10, ..., tail = FALSE)  # S3 method for class 'doc_item' print(x, ...)  # S3 method for class 'doc_queryables' print(x, n = 10, ...)  # S3 method for class 'doc_conformance' print(x, n = 10, ...)  # S3 method for class 'doc_link' print(x, ...)  # S3 method for class 'doc_links' print(x, n = 10, ...)"},{"path":"https://brazil-data-cube.github.io/rstac/reference/print.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Printing functions — print","text":"x either rstac_query object expressing STAC query criteria rstac_doc. ... parameters passed functions. n number entries print. object rule truncation: doc_collection objects print 10 links default. object less 20 collections, collections shown. doc_items, 10 features printed default. show entries, use n = Inf. tail logical value indicating last features doc_items object must show.","code":""},{"path":[]},{"path":"https://brazil-data-cube.github.io/rstac/reference/print.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Printing functions — print","text":"","code":"if (FALSE) { # \\dontrun{  # doc_items object  stac_item_collection <-    stac(\"https://brazildatacube.dpi.inpe.br/stac/\") %>%    stac_search(collections = \"CB4-16D-2\",           bbox = c(-47.02148, -17.35063, -42.53906, -12.98314),           limit = 15) %>%    get_request()   print(stac_item_collection, n = 10)   # doc_collections object  stac_collection <-      stac(\"https://brazildatacube.dpi.inpe.br/stac/\") %>%      collections() %>%      get_request()   print(stac_collection, n = 5)   # rstac_query object  obj_rstac <- stac(\"https://brazildatacube.dpi.inpe.br/stac/\")   print(obj_rstac) } # }"},{"path":"https://brazil-data-cube.github.io/rstac/reference/queryables.html","id":null,"dir":"Reference","previous_headings":"","what":"Endpoint functions — queryables","title":"Endpoint functions — queryables","text":"queryables endpoint allows user discover properties can used filter extension. endpoint can accessed catalog (/queryables) collection (/collections/{collection_id}/queryables).","code":""},{"path":"https://brazil-data-cube.github.io/rstac/reference/queryables.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Endpoint functions — queryables","text":"","code":"queryables(q)"},{"path":"https://brazil-data-cube.github.io/rstac/reference/queryables.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Endpoint functions — queryables","text":"q rstac_query object expressing STAC query criteria.","code":""},{"path":"https://brazil-data-cube.github.io/rstac/reference/queryables.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Endpoint functions — queryables","text":"rstac_query object subclass queryables /queryables endpoint.","code":""},{"path":[]},{"path":"https://brazil-data-cube.github.io/rstac/reference/queryables.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Endpoint functions — queryables","text":"","code":"if (FALSE) { # \\dontrun{ # Catalog's queryables stac(\"https://planetarycomputer.microsoft.com/api/stac/v1\") %>%   queryables() %>% get_request()  # Collection's queryables stac(\"https://planetarycomputer.microsoft.com/api/stac/v1\") %>%   collections(collection_id = \"sentinel-2-l2a\") %>%   queryables() %>%   get_request() } # }"},{"path":"https://brazil-data-cube.github.io/rstac/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. magrittr %>%","code":""},{"path":"https://brazil-data-cube.github.io/rstac/reference/request.html","id":null,"dir":"Reference","previous_headings":"","what":"STAC API request functions — get_request","title":"STAC API request functions — get_request","text":"get_request function makes HTTP GET requests STAC web services, retrieves, parse data. post_request function makes HTTP POST requests STAC web services, retrieves, parse data.","code":""},{"path":"https://brazil-data-cube.github.io/rstac/reference/request.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"STAC API request functions — get_request","text":"","code":"get_request(q, ...)  post_request(q, ..., encode = c(\"json\", \"multipart\", \"form\"))"},{"path":"https://brazil-data-cube.github.io/rstac/reference/request.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"STAC API request functions — get_request","text":"q rstac_query object expressing STAC query criteria. ... config parameters passed GET POST methods, add_headers set_cookies. encode character informing request body Content-Type. Accepted types 'json' ('application/json'), 'form' ('application/x-www-form-urlencoded'), 'multipart' ('multipart/form-data'). Defaults 'json'.","code":""},{"path":"https://brazil-data-cube.github.io/rstac/reference/request.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"STAC API request functions — get_request","text":"Either doc_catalog, doc_collection, doc_collections, doc_items doc_item object depending subclass search fields parameters q argument.","code":""},{"path":[]},{"path":"https://brazil-data-cube.github.io/rstac/reference/request.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"STAC API request functions — get_request","text":"","code":"if (FALSE) { # \\dontrun{  stac(\"https://brazildatacube.dpi.inpe.br/stac/\") %>%   get_request()   stac(\"https://brazildatacube.dpi.inpe.br/stac/\") %>%   stac_search(collections = \"CB4-16D-2\") %>%   post_request() } # }"},{"path":"https://brazil-data-cube.github.io/rstac/reference/rstac.html","id":null,"dir":"Reference","previous_headings":"","what":"R client library for STAC (rstac) — rstac","title":"R client library for STAC (rstac) — rstac","text":"Provides functions access, search download spacetime earth observation data via SpatioTemporal Asset Catalog (STAC). package supports version 1.0.0 (older) STAC specification (https://github.com/radiantearth/stac-spec). details see Simoes et al. (2021) doi:10.1109/IGARSS47720.2021.9553518 .","code":""},{"path":"https://brazil-data-cube.github.io/rstac/reference/rstac.html","id":"the-rstac-functions","dir":"Reference","previous_headings":"","what":"The rstac functions","title":"R client library for STAC (rstac) — rstac","text":"rstac package provides two categories functions: API endpoints data access organization.","code":""},{"path":"https://brazil-data-cube.github.io/rstac/reference/rstac.html","id":"stac-api-endpoints-functions","dir":"Reference","previous_headings":"","what":"STAC API endpoints functions","title":"R client library for STAC (rstac) — rstac","text":"stac(): implements STAC /stac endpoint version 0.8.1 , / versions 0.9.0 higher. conformance(): implements /conformance endpoint. collections(): implements /collections /collections/{collectionId} endpoints. items(): implements /collections/{collectionId}/items /collections/{collectionId}/items/{featureId} endpoints. queryables(): implements /queryables /collections/{collectionId}/queryables endpoints. stac_search(): implements STAC /stac/search endpoint version 0.8.1 , /search endpoint versions 0.9.0 higher. ext_filter(): implements /filter CQL2 endpoint.","code":""},{"path":"https://brazil-data-cube.github.io/rstac/reference/rstac.html","id":"data-access-and-organization-functions","dir":"Reference","previous_headings":"","what":"Data access and organization functions","title":"R client library for STAC (rstac) — rstac","text":"get_request(): makes HTTP GET requests STAC web service. post_request(): makes HTTP POST requests STAC web service. items_matched(): returns many items matched search criteria. items_fetch(): fetches matched items service. items_filter(): selects items according criteria. items_as_sf(): converts items sf object. items_fields(): help explore fields inside items. items_compact(): removes items empty assets. items_reap(): extracts contents items. items_length(): informs many items fetched locally. items_sign(): appends tokens assets' URL turn accessible. assets_select(): select assets items. assets_rename(): rename assets items. assets_url(): extract URL assets items. assets_download(): download assets batch.","code":""},{"path":"https://brazil-data-cube.github.io/rstac/reference/rstac.html","id":"data-types","dir":"Reference","previous_headings":"","what":"Data types","title":"R client library for STAC (rstac) — rstac","text":"package implements following S3 classes: doc_items, doc_item, doc_catalog, doc_collections doc_collection. classes regular lists representing corresponding JSON STAC objects.","code":""},{"path":[]},{"path":"https://brazil-data-cube.github.io/rstac/reference/rstac.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"R client library for STAC (rstac) — rstac","text":"Maintainer: Felipe Carvalho lipecaso@gmail.com Authors: Rolf Simoes rolfsimoes@gmail.com Brazil Data Cube Team brazildatacube@inpe.br contributors: National Institute Space Research (INPE) [copyright holder]","code":""},{"path":"https://brazil-data-cube.github.io/rstac/reference/stac.html","id":null,"dir":"Reference","previous_headings":"","what":"Endpoint functions — stac","title":"Endpoint functions — stac","text":"stac function implements /stac API endpoint (>=0.8.0), / versions 0.9.0 higher. prepares search field parameters provided STAC API web service. endpoint return STAC Catalog document containing published data catalogs.","code":""},{"path":"https://brazil-data-cube.github.io/rstac/reference/stac.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Endpoint functions — stac","text":"","code":"stac(base_url, force_version = NULL)"},{"path":"https://brazil-data-cube.github.io/rstac/reference/stac.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Endpoint functions — stac","text":"base_url character informing base URL STAC web service. force_version character providing version STAC used. provided, rstac package make requests try find version STAC used. highly recommended inform STAC version using.","code":""},{"path":"https://brazil-data-cube.github.io/rstac/reference/stac.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Endpoint functions — stac","text":"rstac_query object subclass stac containing request parameters provided API service.","code":""},{"path":[]},{"path":"https://brazil-data-cube.github.io/rstac/reference/stac.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Endpoint functions — stac","text":"","code":"if (FALSE) { # \\dontrun{  stac(\"https://brazildatacube.dpi.inpe.br/stac/\") %>%    get_request() } # }"},{"path":"https://brazil-data-cube.github.io/rstac/reference/stac_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Utility functions — stac_functions","title":"Utility functions — stac_functions","text":"function retrieves information either rstac queries (rstac_query objects) rstac documents (rstac_doc objects).","code":""},{"path":"https://brazil-data-cube.github.io/rstac/reference/stac_functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Utility functions — stac_functions","text":"","code":"stac_version(x, ...)  stac_type(x)"},{"path":"https://brazil-data-cube.github.io/rstac/reference/stac_functions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Utility functions — stac_functions","text":"x either rstac_query object expressing STAC query criteria rstac_doc. ... config parameters passed GET method, add_headers set_cookies.","code":""},{"path":"https://brazil-data-cube.github.io/rstac/reference/stac_functions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Utility functions — stac_functions","text":"stac_version() function returns character STAC API version.","code":""},{"path":"https://brazil-data-cube.github.io/rstac/reference/stac_search.html","id":null,"dir":"Reference","previous_headings":"","what":"Endpoint functions — stac_search","title":"Endpoint functions — stac_search","text":"(document based STAC specification documentation https://github.com/radiantearth/stac-spec/ reproduces parts) stac_search function implements /stac/search API endpoint (v0.8.1) /search (v0.9.0 v1.0.0). prepares query parameters used search API request, stac object filter parameters provided get_request post_request functions. GeoJSON content returned requests doc_items object, regular R list representing STAC Item Collection document.","code":""},{"path":"https://brazil-data-cube.github.io/rstac/reference/stac_search.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Endpoint functions — stac_search","text":"","code":"stac_search(   q,   collections = NULL,   ids = NULL,   bbox = NULL,   datetime = NULL,   intersects = NULL,   limit = NULL )"},{"path":"https://brazil-data-cube.github.io/rstac/reference/stac_search.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Endpoint functions — stac_search","text":"q rstac_query object expressing STAC query criteria. collections character vector collection IDs include search items. items one provided collections searched. ids character vector item IDs. filters parameters restrict number search results ignored. bbox numeric vector features geometry intersects bounding box selected. bounding box provided four six numbers, depending whether coordinate reference system includes vertical axis (elevation depth): Lower left corner, coordinate axis 1 Lower left corner, coordinate axis 2 Lower left corner, coordinate axis 3 (optional) Upper right corner, coordinate axis 1 Upper right corner, coordinate axis 2 Upper right corner, coordinate axis 3 (optional) coordinate reference system values WGS84 longitude/latitude (http://www.opengis.net/def/crs/OGC/1.3/CRS84). values , cases, sequence minimum longitude, minimum latitude, maximum longitude, maximum latitude. However, cases box spans antimeridian, first value (west-box edge) larger third value (east-box edge). datetime character date-time interval. Date time strings needs conform RFC 3339. Intervals expressed separating two date-time strings '/' character. Open intervals expressed using '..' place date-time. Examples: date-time: \"2018-02-12T23:20:50Z\" closed interval: \"2018-02-12T00:00:00Z/2018-03-18T12:31:12Z\" Open intervals: \"2018-02-12T00:00:00Z/..\" \"../2018-03-18T12:31:12Z\" features datetime property intersects interval date-time informed datetime selected. intersects list expressing GeoJSON geometries objects specified RFC 7946. returns items intersect provided geometry. turn GeoJSON list package jsonlite can used. limit integer defining maximum number results return. informed, defaults service implementation.","code":""},{"path":"https://brazil-data-cube.github.io/rstac/reference/stac_search.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Endpoint functions — stac_search","text":"rstac_query object subclass search containing search field parameters provided STAC API web service.","code":""},{"path":[]},{"path":"https://brazil-data-cube.github.io/rstac/reference/stac_search.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Endpoint functions — stac_search","text":"","code":"if (FALSE) { # \\dontrun{  # GET request  stac(\"https://brazildatacube.dpi.inpe.br/stac/\") %>%   stac_search(collections = \"CB4-16D-2\", limit = 10,          datetime = \"2017-08-01/2018-03-01\") %>%   get_request()   # POST request  stac(\"https://brazildatacube.dpi.inpe.br/stac/\") %>%   stac_search(collections = \"CB4-16D-2\",          bbox = c(-47.02148, -17.35063, -42.53906, -12.98314)) %>%   post_request() } # }"},{"path":"https://brazil-data-cube.github.io/rstac/reference/static_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Static functions — static_functions","title":"Static functions — static_functions","text":"functions provide support work static catalogs. stac_read(): open STAC document URL. read_items(): opens (statically) items referred links key entry given collection document (doc_collection). links(): extracts filters links STAC document. link_open(): opens (statically) document referenced link. function can resolve relative URL.","code":""},{"path":"https://brazil-data-cube.github.io/rstac/reference/static_functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Static functions — static_functions","text":"","code":"read_stac(url, ...)  read_items(collection, ..., limit = 100, page = 1, progress = TRUE)  read_collections(catalog, ..., limit = 100, page = 1, progress = TRUE)  links(x, ...)  link_open(link, base_url = NULL)"},{"path":"https://brazil-data-cube.github.io/rstac/reference/static_functions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Static functions — static_functions","text":"url character value URL valid STAC document. ... additional arguments. See details. collection doc_collection object fetch rel==\"item\" links. limit integer defining page size items fetch. page integer page number fetch items. progress logical indicating progress bar must shown . Defaults TRUE. catalog doc_catalog object fetch rel==\"child\" links. x rstac document 'links' key entry. link doc_link object, usually element links key entry. base_url character base URL resolve relative links. NULL (default) rstac try resolve relative links using internal metadata.","code":""},{"path":"https://brazil-data-cube.github.io/rstac/reference/static_functions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Static functions — static_functions","text":"links(): doc_links object containing list link entries. link_open(): recognizable rstac document.","code":""},{"path":"https://brazil-data-cube.github.io/rstac/reference/static_functions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Static functions — static_functions","text":"Ellipsis argument (...) may appears different items functions distinct purposes: stac_read(): ellipsis used pass additional parameters read_json function. links(): ellipsis used pass logical expressions evaluated doc_link item filter criteria. See examples.","code":""},{"path":"https://brazil-data-cube.github.io/rstac/reference/static_functions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Static functions — static_functions","text":"","code":"if (FALSE) { # \\dontrun{  x <- stac(\"https://brazildatacube.dpi.inpe.br/stac\") %>%      collections(\"CB4-16D-2\") %>%      get_request()   link <- links(x, rel == \"items\")  link_open(link[[1]]) } # }  if (FALSE) { # \\dontrun{  wv_url <- paste0(    \"https://s3.eu-central-1.wasabisys.com\",    \"/stac/openlandmap/wv_mcd19a2v061.seasconv/collection.json\"  )  wv <- read_stac(wv_url)  stac_type(wv)  # Collection   # reads the second page of 5 links  wv_items <- read_items(wv, limit = 5, page = 2)   # lists all links of the collection document that are not items  links(wv, rel != \"item\")   # lists all links of the items document  links(wv_items) } # }"},{"path":[]},{"path":"https://brazil-data-cube.github.io/rstac/news/index.html","id":"rstac-101-released-2024-07-18","dir":"Changelog","previous_headings":"","what":"rstac 1.0.1 (Released 2024-07-18)","title":"rstac 1.0.1 (Released 2024-07-18)","text":"Add support jpg preview_plot() function (#161) Fix variable filter expressions (non-standard evaluation) (#160) Fix limit parameter integer type stac_search() items() Improve items_reap() documentation (#152)","code":""},{"path":"https://brazil-data-cube.github.io/rstac/news/index.html","id":"rstac-100-released-2024-02-14","dir":"Changelog","previous_headings":"","what":"rstac 1.0.0 (Released 2024-02-14)","title":"rstac 1.0.0 (Released 2024-02-14)","text":"CRAN release: 2024-02-14 Add support static catalogs; read_stac(): read STAC document URL (e.g. Catalog, Collection, Items, Item); links(): extract filter links STAC document; link_open(): open document referenced provided link; read_items(): read items listed links section provided Collection document; read_collections(): read collections listed links section provided Catalog document; Provide new functions facilitate work items; items_as_sf() / items_as_sfc(): convert items sf objects items_intersects(): helper function test items intersect given geometry.","code":""},{"path":"https://brazil-data-cube.github.io/rstac/news/index.html","id":"rstac-092-4-released-2023-06-15","dir":"Changelog","previous_headings":"","what":"rstac 0.9.2-4 (Released 2023-06-15)","title":"rstac 0.9.2-4 (Released 2023-06-15)","text":"CRAN release: 2023-06-14 Fix vignette BDC errors","code":""},{"path":"https://brazil-data-cube.github.io/rstac/news/index.html","id":"rstac-092-3-released-2023-04-17","dir":"Changelog","previous_headings":"","what":"rstac 0.9.2-3 (Released 2023-04-17)","title":"rstac 0.9.2-3 (Released 2023-04-17)","text":"CRAN release: 2023-05-10 Fix renewing mpc tokens per session Include support check package github actions Add issue template","code":""},{"path":"https://brazil-data-cube.github.io/rstac/news/index.html","id":"rstac-092-2-released-2023-02-02","dir":"Changelog","previous_headings":"","what":"rstac 0.9.2-2 (Released 2023-02-02)","title":"rstac 0.9.2-2 (Released 2023-02-02)","text":"CRAN release: 2023-02-01 Fix mpc vignette","code":""},{"path":"https://brazil-data-cube.github.io/rstac/news/index.html","id":"rstac-092-1-released-2023-01-21","dir":"Changelog","previous_headings":"","what":"rstac 0.9.2-1 (Released 2023-01-21)","title":"rstac 0.9.2-1 (Released 2023-01-21)","text":"CRAN release: 2023-01-21 Fix intersects bug stac_search() function Vignettes now fault tolerant","code":""},{"path":"https://brazil-data-cube.github.io/rstac/news/index.html","id":"rstac-092-released-2023-01-10","dir":"Changelog","previous_headings":"","what":"rstac 0.9.2 (Released 2023-01-10)","title":"rstac 0.9.2 (Released 2023-01-10)","text":"CRAN release: 2023-01-19 Add support CQL2 filter extension function ext_filter() Add conformance() queryables() endpoints functions Add assets_rename() assets_url() assets functions Add items_compact() function General improvements items functions minor improvements Deprecated assets_filter() items_group() functions","code":""},{"path":"https://brazil-data-cube.github.io/rstac/news/index.html","id":"rstac-091-6-released-2021-11-05","dir":"Changelog","previous_headings":"","what":"rstac 0.9.1-6 (Released 2021-11-05)","title":"rstac 0.9.1-6 (Released 2021-11-05)","text":"Fix examples README bbox parameter wrong order Now items without “match” property can downloaded Introduce bbox checker Fix appveyor bug","code":""},{"path":"https://brazil-data-cube.github.io/rstac/news/index.html","id":"rstac-091-5-released-2021-11-01","dir":"Changelog","previous_headings":"","what":"rstac 0.9.1-5 (Released 2021-11-01)","title":"rstac 0.9.1-5 (Released 2021-11-01)","text":"CRAN release: 2021-10-31 Add support lifecycle package Documentation changed Rd markdown New functions support assets items manipulation added: assets_select, assets_filter, items_filter documentation reviewed New examples tests added rstac now supports signatures href using items_sign function Function items_bands() changed items_assets() Parameters assets_name assets_names now called asset_names Add rstac reference paper README Add feature name print items objects Create items_next function single pagination request Adjust download helpers access data Microsoft’s Planetary Computer Update news.md v0.9.0-1","code":""},{"path":"https://brazil-data-cube.github.io/rstac/news/index.html","id":"rstac-091-4-released-2021-09-14","dir":"Changelog","previous_headings":"","what":"rstac 0.9.1-4 (Released 2021-09-14)","title":"rstac 0.9.1-4 (Released 2021-09-14)","text":"CRAN release: 2021-07-10 Fix typos Update docs Update tests Update fixtures files","code":""},{"path":"https://brazil-data-cube.github.io/rstac/news/index.html","id":"rstac-091-3-released-2021-06-25","dir":"Changelog","previous_headings":"","what":"rstac 0.9.1-3 (Released 2021-06-25)","title":"rstac 0.9.1-3 (Released 2021-06-25)","text":"Fix bug related items_fetch using bbox parameter #41 Update fixtures introduces new parameter items_fetch #39","code":""},{"path":"https://brazil-data-cube.github.io/rstac/news/index.html","id":"rstac-091-2-released-2021-05-28","dir":"Changelog","previous_headings":"","what":"rstac 0.9.1-2 (Released 2021-05-28)","title":"rstac 0.9.1-2 (Released 2021-05-28)","text":"Fix pagination items_fetch function conform STAC API spec Improve README","code":""},{"path":"https://brazil-data-cube.github.io/rstac/news/index.html","id":"rstac-090-2-released-2021-03-24","dir":"Changelog","previous_headings":"","what":"rstac 0.9.0-2 (Released 2021-03-24)","title":"rstac 0.9.0-2 (Released 2021-03-24)","text":"Change version 0.9.0 0.9.0-2 DESCRIPTION Fix assets without extension assets_download function","code":""},{"path":"https://brazil-data-cube.github.io/rstac/news/index.html","id":"rstac-090-1-released-2020-10-20","dir":"Changelog","previous_headings":"","what":"rstac 0.9.0-1 (Released 2020-10-20)","title":"rstac 0.9.0-1 (Released 2020-10-20)","text":"Update ext_query function Add magrittr package depends Add function items_bands Introduces items_bbox items_datetime functions Update print.R file Fix items_fetch Update assets_download.R others functions Add function ‘get_assets_name’ Add overwrite items_max parameter; solve issue #10 Fix bug stac_matched update documentation Change function name .verify_datime()' parse_datetime() Rename function extension_query ext_query","code":""},{"path":"https://brazil-data-cube.github.io/rstac/news/index.html","id":"rstac-090-released-2020-09-18","dir":"Changelog","previous_headings":"","what":"rstac 0.9.0 (Released 2020-09-18)","title":"rstac 0.9.0 (Released 2020-09-18)","text":"CRAN release: 2020-12-14 Fix issue CRAN. Preparing package send CRAN. Update documentation. Add function extensions creating. Add new tests. Support STAC version 0.9.0 0.8.1.","code":""},{"path":"https://brazil-data-cube.github.io/rstac/news/index.html","id":"rstac-081-released-2020-08-24","dir":"Changelog","previous_headings":"","what":"rstac 0.8.1 (Released 2020-08-24)","title":"rstac 0.8.1 (Released 2020-08-24)","text":"Support STAC version 0.8.0 0.8.1. Add functions download support analysis items objects. Add new tests. License: MIT <https://raw.githubusercontent.com/brazil-data-cube/rstac/b-0.9.0/LICENSE>_ . Update documentation. Add CI support. Add tests CI. Unit-tests code coverage.","code":""}]
